int/CODE_DELIMITER/*/CODE_DELIMITER/twoSum/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/nums/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/numsSize/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/target/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/returnSize/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/,/CODE_DELIMITER/j/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/ret/CODE_DELIMITER/=/CODE_DELIMITER/calloc/CODE_DELIMITER/(/CODE_DELIMITER/2/CODE_DELIMITER/,/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/numsSize/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/key/CODE_DELIMITER/=/CODE_DELIMITER/target/CODE_DELIMITER/-/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/j/CODE_DELIMITER/=/CODE_DELIMITER/i/CODE_DELIMITER/+/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/j/CODE_DELIMITER/</CODE_DELIMITER/numsSize/CODE_DELIMITER/;/CODE_DELIMITER/j/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/j/CODE_DELIMITER/]/CODE_DELIMITER/==/CODE_DELIMITER/key/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/ret/CODE_DELIMITER/[/CODE_DELIMITER/0/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/i/CODE_DELIMITER/;/CODE_DELIMITER/ret/CODE_DELIMITER/[/CODE_DELIMITER/1/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/j/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/}/CODE_DELIMITER/*/CODE_DELIMITER/returnSize/CODE_DELIMITER/=/CODE_DELIMITER/2/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/ret/CODE_DELIMITER/;/CODE_DELIMITER/}
void/CODE_DELIMITER/duplicateZeros/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/arr/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/arrSize/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/,/CODE_DELIMITER/start/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/tmp/CODE_DELIMITER/=/CODE_DELIMITER/malloc/CODE_DELIMITER/(/CODE_DELIMITER/arrSize/CODE_DELIMITER/*/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER//* Copy arr into tmp arr *//CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/arrSize/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/tmp/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/arr/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/start/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/start/CODE_DELIMITER/</CODE_DELIMITER/arrSize/CODE_DELIMITER/;/CODE_DELIMITER/start/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/arr/CODE_DELIMITER/[/CODE_DELIMITER/start/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/tmp/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/tmp/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/==/CODE_DELIMITER/0/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/start/CODE_DELIMITER/++/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/start/CODE_DELIMITER/</CODE_DELIMITER/arrSize/CODE_DELIMITER/)/CODE_DELIMITER/arr/CODE_DELIMITER/[/CODE_DELIMITER/start/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/}
// Dynamic Programming/CODE_DELIMITER/// Runtime: O(n)/CODE_DELIMITER/// Space: O(1)/CODE_DELIMITER/int/CODE_DELIMITER/tribonacci/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/n/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/t0/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/t1/CODE_DELIMITER/=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/t2/CODE_DELIMITER/=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/n/CODE_DELIMITER/==/CODE_DELIMITER/0/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/t0/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/n/CODE_DELIMITER/==/CODE_DELIMITER/1/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/t1/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/n/CODE_DELIMITER/==/CODE_DELIMITER/2/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/t2/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/n/CODE_DELIMITER/-/CODE_DELIMITER/2/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/nextT/CODE_DELIMITER/=/CODE_DELIMITER/t0/CODE_DELIMITER/+/CODE_DELIMITER/t1/CODE_DELIMITER/+/CODE_DELIMITER/t2/CODE_DELIMITER/;/CODE_DELIMITER/t0/CODE_DELIMITER/=/CODE_DELIMITER/t1/CODE_DELIMITER/;/CODE_DELIMITER/t1/CODE_DELIMITER/=/CODE_DELIMITER/t2/CODE_DELIMITER/;/CODE_DELIMITER/t2/CODE_DELIMITER/=/CODE_DELIMITER/nextT/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/t2/CODE_DELIMITER/;/CODE_DELIMITER/}
int/CODE_DELIMITER/distanceBetweenBusStops/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/distance/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/distanceSize/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/start/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/destination/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/sum1/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/,/CODE_DELIMITER/sum2/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/start/CODE_DELIMITER/>/CODE_DELIMITER/destination/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/tmp/CODE_DELIMITER/=/CODE_DELIMITER/start/CODE_DELIMITER/;/CODE_DELIMITER/start/CODE_DELIMITER/=/CODE_DELIMITER/destination/CODE_DELIMITER/;/CODE_DELIMITER/destination/CODE_DELIMITER/=/CODE_DELIMITER/tmp/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/auto/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/distanceSize/CODE_DELIMITER/;/CODE_DELIMITER/++/CODE_DELIMITER/i/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/i/CODE_DELIMITER/>=/CODE_DELIMITER/start/CODE_DELIMITER/&&/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/destination/CODE_DELIMITER/)/CODE_DELIMITER/sum1/CODE_DELIMITER/+=/CODE_DELIMITER/distance/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/else/CODE_DELIMITER/sum2/CODE_DELIMITER/+=/CODE_DELIMITER/distance/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/sum1/CODE_DELIMITER/</CODE_DELIMITER/sum2/CODE_DELIMITER/?/CODE_DELIMITER/sum1/CODE_DELIMITER/:/CODE_DELIMITER/sum2/CODE_DELIMITER/;/CODE_DELIMITER/}
#/CODE_DELIMITER/define/CODE_DELIMITER/MAP_SIZE/CODE_DELIMITER/2048/CODE_DELIMITER/int/CODE_DELIMITER/cmpvalue/CODE_DELIMITER/(/CODE_DELIMITER/const/CODE_DELIMITER/void/CODE_DELIMITER/*/CODE_DELIMITER/a/CODE_DELIMITER/,/CODE_DELIMITER/const/CODE_DELIMITER/void/CODE_DELIMITER/*/CODE_DELIMITER/b/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/*/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/)/CODE_DELIMITER/b/CODE_DELIMITER/-/CODE_DELIMITER/*/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/)/CODE_DELIMITER/a/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/bool/CODE_DELIMITER/uniqueOccurrences/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/arr/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/arrSize/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/map/CODE_DELIMITER/=/CODE_DELIMITER/calloc/CODE_DELIMITER/(/CODE_DELIMITER/MAP_SIZE/CODE_DELIMITER/,/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/arrSize/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/arr/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/</CODE_DELIMITER/0/CODE_DELIMITER/)/CODE_DELIMITER/map/CODE_DELIMITER/[/CODE_DELIMITER/arr/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/+/CODE_DELIMITER/MAP_SIZE/CODE_DELIMITER///CODE_DELIMITER/2/CODE_DELIMITER/]/CODE_DELIMITER/+=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/else/CODE_DELIMITER/map/CODE_DELIMITER/[/CODE_DELIMITER/arr/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/]/CODE_DELIMITER/+=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER//* number of occurrences is sorted by decreasing order
       Ex: 3 2 1 0 0 0 0 *//CODE_DELIMITER/qsort/CODE_DELIMITER/(/CODE_DELIMITER/map/CODE_DELIMITER/,/CODE_DELIMITER/MAP_SIZE/CODE_DELIMITER/,/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/)/CODE_DELIMITER/,/CODE_DELIMITER/cmpvalue/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/while/CODE_DELIMITER/(/CODE_DELIMITER/map/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/map/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/==/CODE_DELIMITER/map/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/+/CODE_DELIMITER/1/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/return/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/}
int/CODE_DELIMITER/maxcmp/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/a/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/b/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/(/CODE_DELIMITER/a/CODE_DELIMITER/>=/CODE_DELIMITER/b/CODE_DELIMITER/)/CODE_DELIMITER/?/CODE_DELIMITER/a/CODE_DELIMITER/:/CODE_DELIMITER/b/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER//* max subarray problem by using Kadane's Algorithm
 *//CODE_DELIMITER/int/CODE_DELIMITER/maxProfit/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/prices/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/pricesSize/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER//* maxCur: current maximum
     * maxSoFar: found maximum for subarray so far
     *//CODE_DELIMITER/int/CODE_DELIMITER/maxCur/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/,/CODE_DELIMITER/maxSoFar/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/pricesSize/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/maxCur/CODE_DELIMITER/=/CODE_DELIMITER/maxcmp/CODE_DELIMITER/(/CODE_DELIMITER/0/CODE_DELIMITER/,/CODE_DELIMITER/maxCur/CODE_DELIMITER/+/CODE_DELIMITER/prices/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/-/CODE_DELIMITER/prices/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/maxSoFar/CODE_DELIMITER/=/CODE_DELIMITER/maxcmp/CODE_DELIMITER/(/CODE_DELIMITER/maxSoFar/CODE_DELIMITER/,/CODE_DELIMITER/maxCur/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/maxSoFar/CODE_DELIMITER/;/CODE_DELIMITER/}
bool/CODE_DELIMITER/isPalindrome/CODE_DELIMITER/(/CODE_DELIMITER/char/CODE_DELIMITER/*/CODE_DELIMITER/s/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/start/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/,/CODE_DELIMITER/end/CODE_DELIMITER/=/CODE_DELIMITER/strlen/CODE_DELIMITER/(/CODE_DELIMITER/s/CODE_DELIMITER/)/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/while/CODE_DELIMITER/(/CODE_DELIMITER/start/CODE_DELIMITER/</CODE_DELIMITER/end/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/!/CODE_DELIMITER/isalpha/CODE_DELIMITER/(/CODE_DELIMITER/s/CODE_DELIMITER/[/CODE_DELIMITER/start/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/&&/CODE_DELIMITER/!/CODE_DELIMITER/isalnum/CODE_DELIMITER/(/CODE_DELIMITER/s/CODE_DELIMITER/[/CODE_DELIMITER/start/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/start/CODE_DELIMITER/++/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/else/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/!/CODE_DELIMITER/isalpha/CODE_DELIMITER/(/CODE_DELIMITER/s/CODE_DELIMITER/[/CODE_DELIMITER/end/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/&&/CODE_DELIMITER/!/CODE_DELIMITER/isalnum/CODE_DELIMITER/(/CODE_DELIMITER/s/CODE_DELIMITER/[/CODE_DELIMITER/end/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/end/CODE_DELIMITER/--/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/else/CODE_DELIMITER/{/CODE_DELIMITER/char/CODE_DELIMITER/c1/CODE_DELIMITER/=/CODE_DELIMITER/tolower/CODE_DELIMITER/(/CODE_DELIMITER/s/CODE_DELIMITER/[/CODE_DELIMITER/start/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/char/CODE_DELIMITER/c2/CODE_DELIMITER/=/CODE_DELIMITER/tolower/CODE_DELIMITER/(/CODE_DELIMITER/s/CODE_DELIMITER/[/CODE_DELIMITER/end/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/c1/CODE_DELIMITER/!=/CODE_DELIMITER/c2/CODE_DELIMITER/)/CODE_DELIMITER/return/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/start/CODE_DELIMITER/++/CODE_DELIMITER/;/CODE_DELIMITER/end/CODE_DELIMITER/--/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/}
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 *//CODE_DELIMITER/bool/CODE_DELIMITER/hasCycle/CODE_DELIMITER/(/CODE_DELIMITER/struct/CODE_DELIMITER/ListNode/CODE_DELIMITER/*/CODE_DELIMITER/head/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/struct/CODE_DELIMITER/ListNode/CODE_DELIMITER/*/CODE_DELIMITER/fast/CODE_DELIMITER/=/CODE_DELIMITER/head/CODE_DELIMITER/,/CODE_DELIMITER/*/CODE_DELIMITER/slow/CODE_DELIMITER/=/CODE_DELIMITER/head/CODE_DELIMITER/;/CODE_DELIMITER/while/CODE_DELIMITER/(/CODE_DELIMITER/slow/CODE_DELIMITER/&&/CODE_DELIMITER/fast/CODE_DELIMITER/&&/CODE_DELIMITER/fast/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/fast/CODE_DELIMITER/=/CODE_DELIMITER/fast/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/;/CODE_DELIMITER/slow/CODE_DELIMITER/=/CODE_DELIMITER/slow/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/fast/CODE_DELIMITER/==/CODE_DELIMITER/slow/CODE_DELIMITER/)/CODE_DELIMITER/return/CODE_DELIMITER/true/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/false/CODE_DELIMITER/;/CODE_DELIMITER/}
struct/CODE_DELIMITER/ListNode/CODE_DELIMITER/*/CODE_DELIMITER/detectCycle/CODE_DELIMITER/(/CODE_DELIMITER/struct/CODE_DELIMITER/ListNode/CODE_DELIMITER/*/CODE_DELIMITER/head/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/head/CODE_DELIMITER/==/CODE_DELIMITER/NULL/CODE_DELIMITER/||/CODE_DELIMITER/head/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/==/CODE_DELIMITER/NULL/CODE_DELIMITER/)/CODE_DELIMITER/return/CODE_DELIMITER/NULL/CODE_DELIMITER/;/CODE_DELIMITER/struct/CODE_DELIMITER/ListNode/CODE_DELIMITER/*/CODE_DELIMITER/slow/CODE_DELIMITER/,/CODE_DELIMITER/*/CODE_DELIMITER/fast/CODE_DELIMITER/;/CODE_DELIMITER/slow/CODE_DELIMITER/=/CODE_DELIMITER/fast/CODE_DELIMITER/=/CODE_DELIMITER/head/CODE_DELIMITER/;/CODE_DELIMITER/while/CODE_DELIMITER/(/CODE_DELIMITER/fast/CODE_DELIMITER/&&/CODE_DELIMITER/fast/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/slow/CODE_DELIMITER/=/CODE_DELIMITER/slow/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/;/CODE_DELIMITER/fast/CODE_DELIMITER/=/CODE_DELIMITER/fast/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/slow/CODE_DELIMITER/==/CODE_DELIMITER/fast/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/struct/CODE_DELIMITER/ListNode/CODE_DELIMITER/*/CODE_DELIMITER/entry/CODE_DELIMITER/=/CODE_DELIMITER/head/CODE_DELIMITER/;/CODE_DELIMITER/while/CODE_DELIMITER/(/CODE_DELIMITER/slow/CODE_DELIMITER/!=/CODE_DELIMITER/entry/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/slow/CODE_DELIMITER/=/CODE_DELIMITER/slow/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/;/CODE_DELIMITER/entry/CODE_DELIMITER/=/CODE_DELIMITER/entry/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/entry/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/NULL/CODE_DELIMITER/;/CODE_DELIMITER/}
int/CODE_DELIMITER/findMin/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/nums/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/numsSize/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/low/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/,/CODE_DELIMITER/high/CODE_DELIMITER/=/CODE_DELIMITER/numsSize/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/while/CODE_DELIMITER/(/CODE_DELIMITER/low/CODE_DELIMITER/</CODE_DELIMITER/high/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/mid/CODE_DELIMITER/=/CODE_DELIMITER/low/CODE_DELIMITER/+/CODE_DELIMITER/(/CODE_DELIMITER/high/CODE_DELIMITER/-/CODE_DELIMITER/low/CODE_DELIMITER/)/CODE_DELIMITER///CODE_DELIMITER/2/CODE_DELIMITER/;/CODE_DELIMITER//* minimum is on left side *//CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/mid/CODE_DELIMITER/]/CODE_DELIMITER/</CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/high/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/high/CODE_DELIMITER/=/CODE_DELIMITER/mid/CODE_DELIMITER/;/CODE_DELIMITER//* minimum is on right side *//CODE_DELIMITER/else/CODE_DELIMITER/low/CODE_DELIMITER/=/CODE_DELIMITER/mid/CODE_DELIMITER/+/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/low/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/}
#/CODE_DELIMITER/define/CODE_DELIMITER/max/CODE_DELIMITER/(/CODE_DELIMITER/a/CODE_DELIMITER/,/CODE_DELIMITER/b/CODE_DELIMITER/)/CODE_DELIMITER/(/CODE_DELIMITER/(/CODE_DELIMITER/(/CODE_DELIMITER/a/CODE_DELIMITER/)/CODE_DELIMITER/>/CODE_DELIMITER/(/CODE_DELIMITER/b/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/?/CODE_DELIMITER/(/CODE_DELIMITER/a/CODE_DELIMITER/)/CODE_DELIMITER/:/CODE_DELIMITER/(/CODE_DELIMITER/b/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/bool/CODE_DELIMITER/equalSubstrings/CODE_DELIMITER/(/CODE_DELIMITER/char/CODE_DELIMITER/*/CODE_DELIMITER/text/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/firstIndex/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/secondIndex/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/length/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/length/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/text/CODE_DELIMITER/[/CODE_DELIMITER/firstIndex/CODE_DELIMITER/+/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/!=/CODE_DELIMITER/text/CODE_DELIMITER/[/CODE_DELIMITER/secondIndex/CODE_DELIMITER/+/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/false/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/true/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/int/CODE_DELIMITER/longestDecompositionDpCached/CODE_DELIMITER/(/CODE_DELIMITER/char/CODE_DELIMITER/*/CODE_DELIMITER/text/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/textLen/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/index/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/dp/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/2/CODE_DELIMITER/*/CODE_DELIMITER/index/CODE_DELIMITER/>=/CODE_DELIMITER/textLen/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/dp/CODE_DELIMITER/[/CODE_DELIMITER/index/CODE_DELIMITER/]/CODE_DELIMITER/==/CODE_DELIMITER/0/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/dp/CODE_DELIMITER/[/CODE_DELIMITER/index/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/longestDecompositionDp/CODE_DELIMITER/(/CODE_DELIMITER/text/CODE_DELIMITER/,/CODE_DELIMITER/textLen/CODE_DELIMITER/,/CODE_DELIMITER/index/CODE_DELIMITER/,/CODE_DELIMITER/dp/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/dp/CODE_DELIMITER/[/CODE_DELIMITER/index/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/int/CODE_DELIMITER/longestDecompositionDp/CODE_DELIMITER/(/CODE_DELIMITER/char/CODE_DELIMITER/*/CODE_DELIMITER/text/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/textLen/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/index/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/dp/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/char/CODE_DELIMITER/ch/CODE_DELIMITER/=/CODE_DELIMITER/text/CODE_DELIMITER/[/CODE_DELIMITER/index/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/result/CODE_DELIMITER/=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/(/CODE_DELIMITER/textLen/CODE_DELIMITER/-/CODE_DELIMITER/2/CODE_DELIMITER/*/CODE_DELIMITER/index/CODE_DELIMITER/)/CODE_DELIMITER///CODE_DELIMITER/2/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/ch/CODE_DELIMITER/==/CODE_DELIMITER/text/CODE_DELIMITER/[/CODE_DELIMITER/textLen/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/-/CODE_DELIMITER/index/CODE_DELIMITER/-/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/&&/CODE_DELIMITER/equalSubstrings/CODE_DELIMITER/(/CODE_DELIMITER/text/CODE_DELIMITER/,/CODE_DELIMITER/index/CODE_DELIMITER/,/CODE_DELIMITER/textLen/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/-/CODE_DELIMITER/index/CODE_DELIMITER/-/CODE_DELIMITER/i/CODE_DELIMITER/,/CODE_DELIMITER/i/CODE_DELIMITER/+/CODE_DELIMITER/1/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/max/CODE_DELIMITER/(/CODE_DELIMITER/result/CODE_DELIMITER/,/CODE_DELIMITER/2/CODE_DELIMITER/+/CODE_DELIMITER/longestDecompositionDpCached/CODE_DELIMITER/(/CODE_DELIMITER/text/CODE_DELIMITER/,/CODE_DELIMITER/textLen/CODE_DELIMITER/,/CODE_DELIMITER/index/CODE_DELIMITER/+/CODE_DELIMITER/i/CODE_DELIMITER/+/CODE_DELIMITER/1/CODE_DELIMITER/,/CODE_DELIMITER/dp/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/result/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/// Dynamic programming. Up -> down approach./CODE_DELIMITER/// Runtime: O(n*n)/CODE_DELIMITER/// Space: O(n)/CODE_DELIMITER/int/CODE_DELIMITER/longestDecomposition/CODE_DELIMITER/(/CODE_DELIMITER/char/CODE_DELIMITER/*/CODE_DELIMITER/text/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/textLen/CODE_DELIMITER/=/CODE_DELIMITER/strlen/CODE_DELIMITER/(/CODE_DELIMITER/text/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/dp/CODE_DELIMITER/=/CODE_DELIMITER/calloc/CODE_DELIMITER/(/CODE_DELIMITER/textLen/CODE_DELIMITER/,/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/result/CODE_DELIMITER/=/CODE_DELIMITER/longestDecompositionDpCached/CODE_DELIMITER/(/CODE_DELIMITER/text/CODE_DELIMITER/,/CODE_DELIMITER/textLen/CODE_DELIMITER/,/CODE_DELIMITER/0/CODE_DELIMITER/,/CODE_DELIMITER/dp/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/free/CODE_DELIMITER/(/CODE_DELIMITER/dp/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/result/CODE_DELIMITER/;/CODE_DELIMITER/}
#/CODE_DELIMITER/define/CODE_DELIMITER/min/CODE_DELIMITER/(/CODE_DELIMITER/X/CODE_DELIMITER/,/CODE_DELIMITER/Y/CODE_DELIMITER/)/CODE_DELIMITER/(/CODE_DELIMITER/(/CODE_DELIMITER/X/CODE_DELIMITER/)/CODE_DELIMITER/</CODE_DELIMITER/(/CODE_DELIMITER/Y/CODE_DELIMITER/)/CODE_DELIMITER/?/CODE_DELIMITER/(/CODE_DELIMITER/X/CODE_DELIMITER/)/CODE_DELIMITER/:/CODE_DELIMITER/(/CODE_DELIMITER/Y/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/// Dynamic programming approach. Down -> Up./CODE_DELIMITER/// Runtime: O(n)/CODE_DELIMITER/// Space: O(1)/CODE_DELIMITER/int/CODE_DELIMITER/minimumDeletions/CODE_DELIMITER/(/CODE_DELIMITER/char/CODE_DELIMITER/*/CODE_DELIMITER/s/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/len/CODE_DELIMITER/=/CODE_DELIMITER/strlen/CODE_DELIMITER/(/CODE_DELIMITER/s/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/aStateValue/CODE_DELIMITER/=/CODE_DELIMITER/s/CODE_DELIMITER/[/CODE_DELIMITER/0/CODE_DELIMITER/]/CODE_DELIMITER/==/CODE_DELIMITER/'b'/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/bStateValue/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/newAStateValue/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/newBStateValue/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/len/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/newAStateValue/CODE_DELIMITER/=/CODE_DELIMITER/aStateValue/CODE_DELIMITER/+/CODE_DELIMITER/(/CODE_DELIMITER/s/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/==/CODE_DELIMITER/'b'/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/newBStateValue/CODE_DELIMITER/=/CODE_DELIMITER/min/CODE_DELIMITER/(/CODE_DELIMITER/aStateValue/CODE_DELIMITER/,/CODE_DELIMITER/bStateValue/CODE_DELIMITER/+/CODE_DELIMITER/(/CODE_DELIMITER/s/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/==/CODE_DELIMITER/'a'/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/aStateValue/CODE_DELIMITER/=/CODE_DELIMITER/newAStateValue/CODE_DELIMITER/;/CODE_DELIMITER/bStateValue/CODE_DELIMITER/=/CODE_DELIMITER/newBStateValue/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/min/CODE_DELIMITER/(/CODE_DELIMITER/aStateValue/CODE_DELIMITER/,/CODE_DELIMITER/bStateValue/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}
// Window sliding. Runtime: O(n), Space: O(n)/CODE_DELIMITER/int/CODE_DELIMITER/maximumUniqueSubarray/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/nums/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/numsSize/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/short/CODE_DELIMITER/*/CODE_DELIMITER/numsSet/CODE_DELIMITER/=/CODE_DELIMITER/(/CODE_DELIMITER/short/CODE_DELIMITER/*/CODE_DELIMITER/)/CODE_DELIMITER/calloc/CODE_DELIMITER/(/CODE_DELIMITER/10001/CODE_DELIMITER/,/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/short/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/numsSet/CODE_DELIMITER/[/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/0/CODE_DELIMITER/]/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/maxSum/CODE_DELIMITER/=/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/0/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/windowSumm/CODE_DELIMITER/=/CODE_DELIMITER/maxSum/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/leftIndex/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/num/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/numsSize/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/num/CODE_DELIMITER/=/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/while/CODE_DELIMITER/(/CODE_DELIMITER/numsSet/CODE_DELIMITER/[/CODE_DELIMITER/num/CODE_DELIMITER/]/CODE_DELIMITER/!=/CODE_DELIMITER/0/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/numsSet/CODE_DELIMITER/[/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/leftIndex/CODE_DELIMITER/]/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/windowSumm/CODE_DELIMITER/-=/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/leftIndex/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/leftIndex/CODE_DELIMITER/++/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/numsSet/CODE_DELIMITER/[/CODE_DELIMITER/num/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/windowSumm/CODE_DELIMITER/+=/CODE_DELIMITER/num/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/maxSum/CODE_DELIMITER/</CODE_DELIMITER/windowSumm/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/maxSum/CODE_DELIMITER/=/CODE_DELIMITER/windowSumm/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/maxSum/CODE_DELIMITER/;/CODE_DELIMITER/}
/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 *//CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/*/CODE_DELIMITER/generate/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/numRows/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/returnSize/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/*/CODE_DELIMITER/returnColumnSizes/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/*/CODE_DELIMITER/returnSize/CODE_DELIMITER/=/CODE_DELIMITER/numRows/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/*/CODE_DELIMITER/ans/CODE_DELIMITER/=/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/*/CODE_DELIMITER/)/CODE_DELIMITER/malloc/CODE_DELIMITER/(/CODE_DELIMITER/numRows/CODE_DELIMITER/*/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/*/CODE_DELIMITER/returnColumnSizes/CODE_DELIMITER/=/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/)/CODE_DELIMITER/malloc/CODE_DELIMITER/(/CODE_DELIMITER/numRows/CODE_DELIMITER/*/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/numRows/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/(/CODE_DELIMITER/*/CODE_DELIMITER/returnColumnSizes/CODE_DELIMITER/)/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/i/CODE_DELIMITER/+/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/ans/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/)/CODE_DELIMITER/malloc/CODE_DELIMITER/(/CODE_DELIMITER/(/CODE_DELIMITER/i/CODE_DELIMITER/+/CODE_DELIMITER/1/CODE_DELIMITER/)/CODE_DELIMITER/*/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/ans/CODE_DELIMITER/[/CODE_DELIMITER/0/CODE_DELIMITER/]/CODE_DELIMITER/[/CODE_DELIMITER/0/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/numRows/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/ans/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/[/CODE_DELIMITER/0/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/j/CODE_DELIMITER/=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/j/CODE_DELIMITER/</CODE_DELIMITER/i/CODE_DELIMITER/;/CODE_DELIMITER/j/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/ans/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/[/CODE_DELIMITER/j/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/ans/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/]/CODE_DELIMITER/[/CODE_DELIMITER/j/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/]/CODE_DELIMITER/+/CODE_DELIMITER/ans/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/]/CODE_DELIMITER/[/CODE_DELIMITER/j/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/ans/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/ans/CODE_DELIMITER/;/CODE_DELIMITER/}
bool/CODE_DELIMITER/isVowel/CODE_DELIMITER/(/CODE_DELIMITER/char/CODE_DELIMITER/chr/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/switch/CODE_DELIMITER/(/CODE_DELIMITER/chr/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/case/CODE_DELIMITER/'a'/CODE_DELIMITER/:/CODE_DELIMITER/case/CODE_DELIMITER/'e'/CODE_DELIMITER/:/CODE_DELIMITER/case/CODE_DELIMITER/'i'/CODE_DELIMITER/:/CODE_DELIMITER/case/CODE_DELIMITER/'o'/CODE_DELIMITER/:/CODE_DELIMITER/case/CODE_DELIMITER/'u'/CODE_DELIMITER/:/CODE_DELIMITER/case/CODE_DELIMITER/'A'/CODE_DELIMITER/:/CODE_DELIMITER/case/CODE_DELIMITER/'E'/CODE_DELIMITER/:/CODE_DELIMITER/case/CODE_DELIMITER/'I'/CODE_DELIMITER/:/CODE_DELIMITER/case/CODE_DELIMITER/'O'/CODE_DELIMITER/:/CODE_DELIMITER/case/CODE_DELIMITER/'U'/CODE_DELIMITER/:/CODE_DELIMITER/return/CODE_DELIMITER/true/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/false/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/// Counting/CODE_DELIMITER/// Runtime: O(n)/CODE_DELIMITER/// Space: O(1)/CODE_DELIMITER/bool/CODE_DELIMITER/halvesAreAlike/CODE_DELIMITER/(/CODE_DELIMITER/char/CODE_DELIMITER/*/CODE_DELIMITER/s/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/lenS/CODE_DELIMITER/=/CODE_DELIMITER/strlen/CODE_DELIMITER/(/CODE_DELIMITER/s/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/halfVowels/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/currVowels/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/lenS/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/isVowel/CODE_DELIMITER/(/CODE_DELIMITER/s/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/currVowels/CODE_DELIMITER/++/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/2/CODE_DELIMITER/*/CODE_DELIMITER/(/CODE_DELIMITER/i/CODE_DELIMITER/+/CODE_DELIMITER/1/CODE_DELIMITER/)/CODE_DELIMITER/==/CODE_DELIMITER/lenS/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/halfVowels/CODE_DELIMITER/=/CODE_DELIMITER/currVowels/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/2/CODE_DELIMITER/*/CODE_DELIMITER/halfVowels/CODE_DELIMITER/==/CODE_DELIMITER/currVowels/CODE_DELIMITER/;/CODE_DELIMITER/}
bool/CODE_DELIMITER/check/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/nums/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/numsSize/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/numsSize/CODE_DELIMITER/==/CODE_DELIMITER/1/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/true/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/bool/CODE_DELIMITER/wasShift/CODE_DELIMITER/=/CODE_DELIMITER/false/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/numsSize/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/]/CODE_DELIMITER/>/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/wasShift/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/false/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/wasShift/CODE_DELIMITER/=/CODE_DELIMITER/true/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/!/CODE_DELIMITER/wasShift/CODE_DELIMITER/||/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/0/CODE_DELIMITER/]/CODE_DELIMITER/>=/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/numsSize/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/}
/**
 * Note: The returned array must be malloced, assume caller calls free().
 *//CODE_DELIMITER/// Count one's from right. Each step from right side decrease for one for each 1's and increase from left:/CODE_DELIMITER/// 1001*0101  -> left: 4 + 1, right: 2 + 4/CODE_DELIMITER/// 10010*101  -> left: (4+1) + (1+1), right: (2-1) + (4-1)/CODE_DELIMITER/// Runtime: O(n)/CODE_DELIMITER/// Space: O(1)/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/minOperations/CODE_DELIMITER/(/CODE_DELIMITER/char/CODE_DELIMITER/*/CODE_DELIMITER/boxes/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/returnSize/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/leftOnes/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/leftCommonDistance/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/rightOnes/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/rightCommonDistance/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/boxesLength/CODE_DELIMITER/=/CODE_DELIMITER/strlen/CODE_DELIMITER/(/CODE_DELIMITER/boxes/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/*/CODE_DELIMITER/returnSize/CODE_DELIMITER/=/CODE_DELIMITER/boxesLength/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/result/CODE_DELIMITER/=/CODE_DELIMITER/malloc/CODE_DELIMITER/(/CODE_DELIMITER/boxesLength/CODE_DELIMITER/*/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/boxesLength/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/boxes/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/==/CODE_DELIMITER/'1'/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/rightOnes/CODE_DELIMITER/+=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/rightCommonDistance/CODE_DELIMITER/+=/CODE_DELIMITER/i/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/}/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/boxesLength/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/boxes/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/==/CODE_DELIMITER/'1'/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/rightOnes/CODE_DELIMITER/-=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/leftOnes/CODE_DELIMITER/+=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/result/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/rightCommonDistance/CODE_DELIMITER/+/CODE_DELIMITER/leftCommonDistance/CODE_DELIMITER/;/CODE_DELIMITER/rightCommonDistance/CODE_DELIMITER/-=/CODE_DELIMITER/rightOnes/CODE_DELIMITER/;/CODE_DELIMITER/leftCommonDistance/CODE_DELIMITER/+=/CODE_DELIMITER/leftOnes/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/result/CODE_DELIMITER/;/CODE_DELIMITER/}
#/CODE_DELIMITER/define/CODE_DELIMITER/max/CODE_DELIMITER/(/CODE_DELIMITER/a/CODE_DELIMITER/,/CODE_DELIMITER/b/CODE_DELIMITER/)/CODE_DELIMITER/(/CODE_DELIMITER/(/CODE_DELIMITER/(/CODE_DELIMITER/a/CODE_DELIMITER/)/CODE_DELIMITER/>/CODE_DELIMITER/(/CODE_DELIMITER/b/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/?/CODE_DELIMITER/(/CODE_DELIMITER/a/CODE_DELIMITER/)/CODE_DELIMITER/:/CODE_DELIMITER/(/CODE_DELIMITER/b/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/int/CODE_DELIMITER/compare/CODE_DELIMITER/(/CODE_DELIMITER/const/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/i/CODE_DELIMITER/,/CODE_DELIMITER/const/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/j/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/*/CODE_DELIMITER/i/CODE_DELIMITER/-/CODE_DELIMITER/*/CODE_DELIMITER/j/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/// Sort + prefix sum + windows sliding/CODE_DELIMITER/// Runtime: O(n*log(n))/CODE_DELIMITER/// Space: O(n)/CODE_DELIMITER/int/CODE_DELIMITER/maxFrequency/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/nums/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/numsSize/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/k/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/qsort/CODE_DELIMITER/(/CODE_DELIMITER/nums/CODE_DELIMITER/,/CODE_DELIMITER/numsSize/CODE_DELIMITER/,/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/)/CODE_DELIMITER/,/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/(/CODE_DELIMITER/*/CODE_DELIMITER/)/CODE_DELIMITER/(/CODE_DELIMITER/const/CODE_DELIMITER/void/CODE_DELIMITER/*/CODE_DELIMITER/,/CODE_DELIMITER/const/CODE_DELIMITER/void/CODE_DELIMITER/*/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/compare/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/long/CODE_DELIMITER/*/CODE_DELIMITER/prefixSum/CODE_DELIMITER/=/CODE_DELIMITER/malloc/CODE_DELIMITER/(/CODE_DELIMITER/numsSize/CODE_DELIMITER/*/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/long/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/prefixSum/CODE_DELIMITER/[/CODE_DELIMITER/0/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/0/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/numsSize/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/prefixSum/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/+/CODE_DELIMITER/1/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/prefixSum/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/+/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/int/CODE_DELIMITER/leftWindowPosition/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/result/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/rightWindowPosition/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/rightWindowPosition/CODE_DELIMITER/</CODE_DELIMITER/numsSize/CODE_DELIMITER/;/CODE_DELIMITER/rightWindowPosition/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/long/CODE_DELIMITER/rightSum/CODE_DELIMITER/=/CODE_DELIMITER/prefixSum/CODE_DELIMITER/[/CODE_DELIMITER/rightWindowPosition/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/long/CODE_DELIMITER/leftSum/CODE_DELIMITER/=/CODE_DELIMITER/prefixSum/CODE_DELIMITER/[/CODE_DELIMITER/leftWindowPosition/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/while/CODE_DELIMITER/(/CODE_DELIMITER/(/CODE_DELIMITER/long/CODE_DELIMITER/)/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/rightWindowPosition/CODE_DELIMITER/]/CODE_DELIMITER/*/CODE_DELIMITER/(/CODE_DELIMITER/rightWindowPosition/CODE_DELIMITER/-/CODE_DELIMITER/leftWindowPosition/CODE_DELIMITER/)/CODE_DELIMITER/-/CODE_DELIMITER/(/CODE_DELIMITER/rightSum/CODE_DELIMITER/-/CODE_DELIMITER/leftSum/CODE_DELIMITER/)/CODE_DELIMITER/>/CODE_DELIMITER/k/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/leftWindowPosition/CODE_DELIMITER/+=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/result/CODE_DELIMITER/=/CODE_DELIMITER/max/CODE_DELIMITER/(/CODE_DELIMITER/result/CODE_DELIMITER/,/CODE_DELIMITER/rightWindowPosition/CODE_DELIMITER/-/CODE_DELIMITER/leftWindowPosition/CODE_DELIMITER/+/CODE_DELIMITER/1/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/free/CODE_DELIMITER/(/CODE_DELIMITER/prefixSum/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/result/CODE_DELIMITER/;/CODE_DELIMITER/}
void/CODE_DELIMITER/rotate/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/nums/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/numsSize/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/k/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/<=/CODE_DELIMITER/k/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/j/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/lastElement/CODE_DELIMITER/;/CODE_DELIMITER/lastElement/CODE_DELIMITER/=/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/numsSize/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/j/CODE_DELIMITER/=/CODE_DELIMITER/numsSize/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/j/CODE_DELIMITER/>/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/j/CODE_DELIMITER/--/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/j/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/j/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/0/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/lastElement/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/}
int/CODE_DELIMITER/maxNumberOfBalloons/CODE_DELIMITER/(/CODE_DELIMITER/char/CODE_DELIMITER/*/CODE_DELIMITER/text/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER//*
        0 -> b,
        1 -> a,
        2 -> l,
        3 -> o,
        4 -> n
    *//CODE_DELIMITER/int/CODE_DELIMITER/count_letters/CODE_DELIMITER/[/CODE_DELIMITER/5/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/{/CODE_DELIMITER/0/CODE_DELIMITER/}/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/,/CODE_DELIMITER/min_counter_ballons/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/char/CODE_DELIMITER/*/CODE_DELIMITER/ptr/CODE_DELIMITER/=/CODE_DELIMITER/text/CODE_DELIMITER/;/CODE_DELIMITER/*/CODE_DELIMITER/ptr/CODE_DELIMITER/;/CODE_DELIMITER/ptr/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/*/CODE_DELIMITER/ptr/CODE_DELIMITER/==/CODE_DELIMITER/'b'/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/count_letters/CODE_DELIMITER/[/CODE_DELIMITER/0/CODE_DELIMITER/]/CODE_DELIMITER/++/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/else/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/*/CODE_DELIMITER/ptr/CODE_DELIMITER/==/CODE_DELIMITER/'a'/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/count_letters/CODE_DELIMITER/[/CODE_DELIMITER/1/CODE_DELIMITER/]/CODE_DELIMITER/++/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/else/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/*/CODE_DELIMITER/ptr/CODE_DELIMITER/==/CODE_DELIMITER/'l'/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/count_letters/CODE_DELIMITER/[/CODE_DELIMITER/2/CODE_DELIMITER/]/CODE_DELIMITER/++/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/else/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/*/CODE_DELIMITER/ptr/CODE_DELIMITER/==/CODE_DELIMITER/'o'/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/count_letters/CODE_DELIMITER/[/CODE_DELIMITER/3/CODE_DELIMITER/]/CODE_DELIMITER/++/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/else/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/*/CODE_DELIMITER/ptr/CODE_DELIMITER/==/CODE_DELIMITER/'n'/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/count_letters/CODE_DELIMITER/[/CODE_DELIMITER/4/CODE_DELIMITER/]/CODE_DELIMITER/++/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/}/CODE_DELIMITER//* Divide by 2 the repeted letters *//CODE_DELIMITER/count_letters/CODE_DELIMITER/[/CODE_DELIMITER/2/CODE_DELIMITER/]/CODE_DELIMITER//=/CODE_DELIMITER/2/CODE_DELIMITER/;/CODE_DELIMITER/count_letters/CODE_DELIMITER/[/CODE_DELIMITER/3/CODE_DELIMITER/]/CODE_DELIMITER//=/CODE_DELIMITER/2/CODE_DELIMITER/;/CODE_DELIMITER//* Max number of times which we can write ballon is equal to min value of
     * letters on count_letter *//CODE_DELIMITER/min_counter_ballons/CODE_DELIMITER/=/CODE_DELIMITER/count_letters/CODE_DELIMITER/[/CODE_DELIMITER/0/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/5/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/count_letters/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/</CODE_DELIMITER/min_counter_ballons/CODE_DELIMITER/)/CODE_DELIMITER/min_counter_ballons/CODE_DELIMITER/=/CODE_DELIMITER/count_letters/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/min_counter_ballons/CODE_DELIMITER/;/CODE_DELIMITER/}
uint32_t/CODE_DELIMITER/reverseBits/CODE_DELIMITER/(/CODE_DELIMITER/uint32_t/CODE_DELIMITER/n/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/uint/CODE_DELIMITER/TotalBits/CODE_DELIMITER/=/CODE_DELIMITER/32/CODE_DELIMITER/;/CODE_DELIMITER/uint32_t/CODE_DELIMITER/reverse_int/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/// stored in memory as 32 bits, each bit valued 0/CODE_DELIMITER/uint/CODE_DELIMITER/i/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/TotalBits/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/(/CODE_DELIMITER/n/CODE_DELIMITER/&/CODE_DELIMITER/(/CODE_DELIMITER/UINT32_C/CODE_DELIMITER/(/CODE_DELIMITER/1/CODE_DELIMITER/)/CODE_DELIMITER/<</CODE_DELIMITER/i/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/// if the bit on the ith position of 32 bit input is/CODE_DELIMITER/// 1, then proceed Further note the use of UINT32_C/CODE_DELIMITER/// to convert 1 to unsigned 32 bit int, since just 1/CODE_DELIMITER/// is treated as int which cannot be shifted left/CODE_DELIMITER/// more than 30 times/CODE_DELIMITER/reverse_int/CODE_DELIMITER/=/CODE_DELIMITER/reverse_int/CODE_DELIMITER/|/CODE_DELIMITER/(/CODE_DELIMITER/UINT32_C/CODE_DELIMITER/(/CODE_DELIMITER/1/CODE_DELIMITER/)/CODE_DELIMITER/<</CODE_DELIMITER/(/CODE_DELIMITER/TotalBits/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/-/CODE_DELIMITER/i/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/// Convert the ith bit from the end in reverse_int/CODE_DELIMITER/// from 0 to 1, if ith bit from beginning in n is 1/CODE_DELIMITER/// This is achieved by using bitwise OR on/CODE_DELIMITER/// reverse_int (where ith bit from end is currently/CODE_DELIMITER/// 0) and 1 shifted left 31 - i bits (to ith bit from/CODE_DELIMITER/// the end)/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/reverse_int/CODE_DELIMITER/;/CODE_DELIMITER/}
/*
Prompt:

Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:
- '.' Matches any single character.
- '*' Matches zero or more of the preceding element.
The matching should cover the entire input string (not partial).

Constraints:

1 <= s.length <= 20
1 <= p.length <= 30
s contains only lowercase English letters.
p contains only lowercase English letters, '.', and '*'.

It is guaranteed for each appearance of the character '*', there will be a previous valid character to match.
*//CODE_DELIMITER/bool/CODE_DELIMITER/isMatch/CODE_DELIMITER/(/CODE_DELIMITER/char/CODE_DELIMITER/*/CODE_DELIMITER/s/CODE_DELIMITER/,/CODE_DELIMITER/char/CODE_DELIMITER/*/CODE_DELIMITER/p/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/bool/CODE_DELIMITER/matchStar/CODE_DELIMITER/(/CODE_DELIMITER/char/CODE_DELIMITER/ch/CODE_DELIMITER/,/CODE_DELIMITER/char/CODE_DELIMITER/*/CODE_DELIMITER/s/CODE_DELIMITER/,/CODE_DELIMITER/char/CODE_DELIMITER/*/CODE_DELIMITER/p/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER//*
Uses Rob pikes Regexp matcher - https://www.cs.princeton.edu/courses/archive/spr09/cos333/beautiful.html
Implementation:
    // match: search for regexp anywhere in text 
    int match(char *regexp, char *text)
    {
        if (regexp[0] == '^')
            return matchhere(regexp+1, text);
        do {  
            if (matchhere(regexp, text))
                return 1;
        } while (*text++ != '\0');
        return 0;
    }
*//CODE_DELIMITER/bool/CODE_DELIMITER/matchStar/CODE_DELIMITER/(/CODE_DELIMITER/char/CODE_DELIMITER/ch/CODE_DELIMITER/,/CODE_DELIMITER/char/CODE_DELIMITER/*/CODE_DELIMITER/s/CODE_DELIMITER/,/CODE_DELIMITER/char/CODE_DELIMITER/*/CODE_DELIMITER/p/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/do/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/isMatch/CODE_DELIMITER/(/CODE_DELIMITER/s/CODE_DELIMITER/,/CODE_DELIMITER/p/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/return/CODE_DELIMITER/true/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/while/CODE_DELIMITER/(/CODE_DELIMITER/*/CODE_DELIMITER/s/CODE_DELIMITER/!=/CODE_DELIMITER/'\0'/CODE_DELIMITER/&&/CODE_DELIMITER/(/CODE_DELIMITER/*/CODE_DELIMITER/s/CODE_DELIMITER/++/CODE_DELIMITER/==/CODE_DELIMITER/ch/CODE_DELIMITER/||/CODE_DELIMITER/ch/CODE_DELIMITER/==/CODE_DELIMITER/'.'/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/false/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/bool/CODE_DELIMITER/isMatch/CODE_DELIMITER/(/CODE_DELIMITER/char/CODE_DELIMITER/*/CODE_DELIMITER/s/CODE_DELIMITER/,/CODE_DELIMITER/char/CODE_DELIMITER/*/CODE_DELIMITER/p/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/*/CODE_DELIMITER/p/CODE_DELIMITER/==/CODE_DELIMITER/'\0'/CODE_DELIMITER/)/CODE_DELIMITER/return/CODE_DELIMITER/*/CODE_DELIMITER/s/CODE_DELIMITER/==/CODE_DELIMITER/'\0'/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/p/CODE_DELIMITER/[/CODE_DELIMITER/1/CODE_DELIMITER/]/CODE_DELIMITER/==/CODE_DELIMITER/'*'/CODE_DELIMITER/)/CODE_DELIMITER/return/CODE_DELIMITER/matchStar/CODE_DELIMITER/(/CODE_DELIMITER/p/CODE_DELIMITER/[/CODE_DELIMITER/0/CODE_DELIMITER/]/CODE_DELIMITER/,/CODE_DELIMITER/s/CODE_DELIMITER/,/CODE_DELIMITER/p/CODE_DELIMITER/+/CODE_DELIMITER/2/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/*/CODE_DELIMITER/s/CODE_DELIMITER/!=/CODE_DELIMITER/'\0'/CODE_DELIMITER/&&/CODE_DELIMITER/(/CODE_DELIMITER/p/CODE_DELIMITER/[/CODE_DELIMITER/0/CODE_DELIMITER/]/CODE_DELIMITER/==/CODE_DELIMITER/'.'/CODE_DELIMITER/||/CODE_DELIMITER/*/CODE_DELIMITER/p/CODE_DELIMITER/==/CODE_DELIMITER/*/CODE_DELIMITER/s/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/isMatch/CODE_DELIMITER/(/CODE_DELIMITER/s/CODE_DELIMITER/+/CODE_DELIMITER/1/CODE_DELIMITER/,/CODE_DELIMITER/p/CODE_DELIMITER/+/CODE_DELIMITER/1/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/false/CODE_DELIMITER/;/CODE_DELIMITER/}
/**
 * Note: The returned array must be malloced, assume caller calls free().
 *//CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/getRow/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/rowIndex/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/returnSize/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/colIndex/CODE_DELIMITER/=/CODE_DELIMITER/rowIndex/CODE_DELIMITER/+/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/ans/CODE_DELIMITER/=/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/)/CODE_DELIMITER/malloc/CODE_DELIMITER/(/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/)/CODE_DELIMITER/*/CODE_DELIMITER/colIndex/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/colIndex/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/ans/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/*/CODE_DELIMITER/returnSize/CODE_DELIMITER/=/CODE_DELIMITER/colIndex/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/r/CODE_DELIMITER/=/CODE_DELIMITER/2/CODE_DELIMITER/;/CODE_DELIMITER/r/CODE_DELIMITER/<=/CODE_DELIMITER/rowIndex/CODE_DELIMITER/;/CODE_DELIMITER/r/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/c/CODE_DELIMITER/=/CODE_DELIMITER/r/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/c/CODE_DELIMITER/>/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/c/CODE_DELIMITER/--/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/ans/CODE_DELIMITER/[/CODE_DELIMITER/c/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/ans/CODE_DELIMITER/[/CODE_DELIMITER/c/CODE_DELIMITER/]/CODE_DELIMITER/+/CODE_DELIMITER/ans/CODE_DELIMITER/[/CODE_DELIMITER/c/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/ans/CODE_DELIMITER/;/CODE_DELIMITER/}
#/CODE_DELIMITER/define/CODE_DELIMITER/max/CODE_DELIMITER/(/CODE_DELIMITER/X/CODE_DELIMITER/,/CODE_DELIMITER/Y/CODE_DELIMITER/)/CODE_DELIMITER/(/CODE_DELIMITER/(/CODE_DELIMITER/X/CODE_DELIMITER/)/CODE_DELIMITER/>/CODE_DELIMITER/(/CODE_DELIMITER/Y/CODE_DELIMITER/)/CODE_DELIMITER/?/CODE_DELIMITER/(/CODE_DELIMITER/X/CODE_DELIMITER/)/CODE_DELIMITER/:/CODE_DELIMITER/(/CODE_DELIMITER/Y/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/int/CODE_DELIMITER/maximizeTarget/CODE_DELIMITER/(/CODE_DELIMITER/char/CODE_DELIMITER/*/CODE_DELIMITER/answerKey/CODE_DELIMITER/,/CODE_DELIMITER/char/CODE_DELIMITER/targetChar/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/k/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/leftIndex/CODE_DELIMITER/=/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/result/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/currTargetChars/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/lenAnswerKey/CODE_DELIMITER/=/CODE_DELIMITER/strlen/CODE_DELIMITER/(/CODE_DELIMITER/answerKey/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/rightIndex/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/rightIndex/CODE_DELIMITER/</CODE_DELIMITER/lenAnswerKey/CODE_DELIMITER/;/CODE_DELIMITER/rightIndex/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/char/CODE_DELIMITER/ch/CODE_DELIMITER/=/CODE_DELIMITER/answerKey/CODE_DELIMITER/[/CODE_DELIMITER/rightIndex/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/ch/CODE_DELIMITER/==/CODE_DELIMITER/targetChar/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/currTargetChars/CODE_DELIMITER/++/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/while/CODE_DELIMITER/(/CODE_DELIMITER/rightIndex/CODE_DELIMITER/-/CODE_DELIMITER/leftIndex/CODE_DELIMITER/>/CODE_DELIMITER/currTargetChars/CODE_DELIMITER/+/CODE_DELIMITER/k/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/leftIndex/CODE_DELIMITER/++/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/answerKey/CODE_DELIMITER/[/CODE_DELIMITER/leftIndex/CODE_DELIMITER/]/CODE_DELIMITER/==/CODE_DELIMITER/targetChar/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/currTargetChars/CODE_DELIMITER/--/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/}/CODE_DELIMITER/result/CODE_DELIMITER/=/CODE_DELIMITER/max/CODE_DELIMITER/(/CODE_DELIMITER/result/CODE_DELIMITER/,/CODE_DELIMITER/rightIndex/CODE_DELIMITER/-/CODE_DELIMITER/leftIndex/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/result/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/// Use sliding window approach + two pointers./CODE_DELIMITER/// Runtime: O(n)/CODE_DELIMITER/// Space: O(1)/CODE_DELIMITER/int/CODE_DELIMITER/maxConsecutiveAnswers/CODE_DELIMITER/(/CODE_DELIMITER/char/CODE_DELIMITER/*/CODE_DELIMITER/answerKey/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/k/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/max/CODE_DELIMITER/(/CODE_DELIMITER/maximizeTarget/CODE_DELIMITER/(/CODE_DELIMITER/answerKey/CODE_DELIMITER/,/CODE_DELIMITER/'T'/CODE_DELIMITER/,/CODE_DELIMITER/k/CODE_DELIMITER/)/CODE_DELIMITER/,/CODE_DELIMITER/maximizeTarget/CODE_DELIMITER/(/CODE_DELIMITER/answerKey/CODE_DELIMITER/,/CODE_DELIMITER/'F'/CODE_DELIMITER/,/CODE_DELIMITER/k/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}
struct/CODE_DELIMITER/ListNode/CODE_DELIMITER/*/CODE_DELIMITER/removeElements/CODE_DELIMITER/(/CODE_DELIMITER/struct/CODE_DELIMITER/ListNode/CODE_DELIMITER/*/CODE_DELIMITER/head/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/val/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/head/CODE_DELIMITER/==/CODE_DELIMITER/NULL/CODE_DELIMITER/)/CODE_DELIMITER/return/CODE_DELIMITER/NULL/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/head/CODE_DELIMITER/->/CODE_DELIMITER/val/CODE_DELIMITER/==/CODE_DELIMITER/val/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/removeElements/CODE_DELIMITER/(/CODE_DELIMITER/head/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/,/CODE_DELIMITER/val/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/else/CODE_DELIMITER/{/CODE_DELIMITER/head/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/=/CODE_DELIMITER/removeElements/CODE_DELIMITER/(/CODE_DELIMITER/head/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/,/CODE_DELIMITER/val/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/head/CODE_DELIMITER/;/CODE_DELIMITER/}
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 *//CODE_DELIMITER/struct/CODE_DELIMITER/ListNode/CODE_DELIMITER/*/CODE_DELIMITER/reverseList/CODE_DELIMITER/(/CODE_DELIMITER/struct/CODE_DELIMITER/ListNode/CODE_DELIMITER/*/CODE_DELIMITER/head/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/struct/CODE_DELIMITER/ListNode/CODE_DELIMITER/*/CODE_DELIMITER/res/CODE_DELIMITER/=/CODE_DELIMITER/NULL/CODE_DELIMITER/;/CODE_DELIMITER/while/CODE_DELIMITER/(/CODE_DELIMITER/head/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/struct/CODE_DELIMITER/ListNode/CODE_DELIMITER/*/CODE_DELIMITER/pre_node/CODE_DELIMITER/=/CODE_DELIMITER/head/CODE_DELIMITER/;/CODE_DELIMITER/head/CODE_DELIMITER/=/CODE_DELIMITER/head/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/;/CODE_DELIMITER/pre_node/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/=/CODE_DELIMITER/res/CODE_DELIMITER/;/CODE_DELIMITER/res/CODE_DELIMITER/=/CODE_DELIMITER/pre_node/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/res/CODE_DELIMITER/;/CODE_DELIMITER/}
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 *//CODE_DELIMITER/struct/CODE_DELIMITER/ListNode/CODE_DELIMITER/*/CODE_DELIMITER/deleteMiddle/CODE_DELIMITER/(/CODE_DELIMITER/struct/CODE_DELIMITER/ListNode/CODE_DELIMITER/*/CODE_DELIMITER/head/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/head/CODE_DELIMITER/==/CODE_DELIMITER/NULL/CODE_DELIMITER/||/CODE_DELIMITER/head/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/==/CODE_DELIMITER/NULL/CODE_DELIMITER/)/CODE_DELIMITER/return/CODE_DELIMITER/NULL/CODE_DELIMITER/;/CODE_DELIMITER/struct/CODE_DELIMITER/ListNode/CODE_DELIMITER/*/CODE_DELIMITER/fast/CODE_DELIMITER/,/CODE_DELIMITER/*/CODE_DELIMITER/slow/CODE_DELIMITER/,/CODE_DELIMITER/*/CODE_DELIMITER/prev/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/n/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/fast/CODE_DELIMITER/=/CODE_DELIMITER/head/CODE_DELIMITER/;/CODE_DELIMITER/slow/CODE_DELIMITER/=/CODE_DELIMITER/head/CODE_DELIMITER/;/CODE_DELIMITER/while/CODE_DELIMITER/(/CODE_DELIMITER/fast/CODE_DELIMITER/!=/CODE_DELIMITER/NULL/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/n/CODE_DELIMITER/=/CODE_DELIMITER/n/CODE_DELIMITER/+/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/fast/CODE_DELIMITER/=/CODE_DELIMITER/fast/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/fast/CODE_DELIMITER/=/CODE_DELIMITER/head/CODE_DELIMITER/;/CODE_DELIMITER/while/CODE_DELIMITER/(/CODE_DELIMITER/fast/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/!=/CODE_DELIMITER/NULL/CODE_DELIMITER/&&/CODE_DELIMITER/fast/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/!=/CODE_DELIMITER/NULL/CODE_DELIMITER/)/CODE_DELIMITER/// finds mid node/CODE_DELIMITER/{/CODE_DELIMITER/prev/CODE_DELIMITER/=/CODE_DELIMITER/slow/CODE_DELIMITER/;/CODE_DELIMITER/slow/CODE_DELIMITER/=/CODE_DELIMITER/slow/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/;/CODE_DELIMITER/fast/CODE_DELIMITER/=/CODE_DELIMITER/fast/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/n/CODE_DELIMITER/%/CODE_DELIMITER/2/CODE_DELIMITER/==/CODE_DELIMITER/0/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/prev/CODE_DELIMITER/=/CODE_DELIMITER/slow/CODE_DELIMITER/;/CODE_DELIMITER/slow/CODE_DELIMITER/=/CODE_DELIMITER/slow/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/;/CODE_DELIMITER/prev/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/=/CODE_DELIMITER/slow/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/else/CODE_DELIMITER/prev/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/=/CODE_DELIMITER/slow/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/head/CODE_DELIMITER/;/CODE_DELIMITER/}
struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/buildBST/CODE_DELIMITER/(/CODE_DELIMITER/struct/CODE_DELIMITER/ListNode/CODE_DELIMITER/*/CODE_DELIMITER/head/CODE_DELIMITER/,/CODE_DELIMITER/struct/CODE_DELIMITER/ListNode/CODE_DELIMITER/*/CODE_DELIMITER/tail/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/head/CODE_DELIMITER/==/CODE_DELIMITER/tail/CODE_DELIMITER/)/CODE_DELIMITER/return/CODE_DELIMITER/NULL/CODE_DELIMITER/;/CODE_DELIMITER/struct/CODE_DELIMITER/ListNode/CODE_DELIMITER/*/CODE_DELIMITER/slow/CODE_DELIMITER/=/CODE_DELIMITER/head/CODE_DELIMITER/,/CODE_DELIMITER/*/CODE_DELIMITER/fast/CODE_DELIMITER/=/CODE_DELIMITER/head/CODE_DELIMITER/;/CODE_DELIMITER/while/CODE_DELIMITER/(/CODE_DELIMITER/fast/CODE_DELIMITER/!=/CODE_DELIMITER/tail/CODE_DELIMITER/&&/CODE_DELIMITER/fast/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/!=/CODE_DELIMITER/tail/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/fast/CODE_DELIMITER/=/CODE_DELIMITER/fast/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/;/CODE_DELIMITER/slow/CODE_DELIMITER/=/CODE_DELIMITER/slow/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/node/CODE_DELIMITER/=/CODE_DELIMITER/malloc/CODE_DELIMITER/(/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/node/CODE_DELIMITER/->/CODE_DELIMITER/val/CODE_DELIMITER/=/CODE_DELIMITER/slow/CODE_DELIMITER/->/CODE_DELIMITER/val/CODE_DELIMITER/;/CODE_DELIMITER/node/CODE_DELIMITER/->/CODE_DELIMITER/left/CODE_DELIMITER/=/CODE_DELIMITER/buildBST/CODE_DELIMITER/(/CODE_DELIMITER/head/CODE_DELIMITER/,/CODE_DELIMITER/slow/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/node/CODE_DELIMITER/->/CODE_DELIMITER/right/CODE_DELIMITER/=/CODE_DELIMITER/buildBST/CODE_DELIMITER/(/CODE_DELIMITER/slow/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/,/CODE_DELIMITER/tail/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/node/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/sortedListToBST/CODE_DELIMITER/(/CODE_DELIMITER/struct/CODE_DELIMITER/ListNode/CODE_DELIMITER/*/CODE_DELIMITER/head/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/!/CODE_DELIMITER/head/CODE_DELIMITER/)/CODE_DELIMITER/return/CODE_DELIMITER/NULL/CODE_DELIMITER/;/CODE_DELIMITER/else/CODE_DELIMITER/return/CODE_DELIMITER/buildBST/CODE_DELIMITER/(/CODE_DELIMITER/head/CODE_DELIMITER/,/CODE_DELIMITER/NULL/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}
int/CODE_DELIMITER/coundDevices/CODE_DELIMITER/(/CODE_DELIMITER/char/CODE_DELIMITER/*/CODE_DELIMITER/bankRow/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/result/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/bankRowSize/CODE_DELIMITER/=/CODE_DELIMITER/strlen/CODE_DELIMITER/(/CODE_DELIMITER/bankRow/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/bankRowSize/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/bankRow/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/==/CODE_DELIMITER/'1'/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/result/CODE_DELIMITER/++/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/result/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/// Counting devices in each row/CODE_DELIMITER/// Runtime: O(n*m), n-number of bank rows, m - max size of row./CODE_DELIMITER/// Space: O(1)/CODE_DELIMITER/int/CODE_DELIMITER/numberOfBeams/CODE_DELIMITER/(/CODE_DELIMITER/char/CODE_DELIMITER/*/CODE_DELIMITER/*/CODE_DELIMITER/bank/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/bankSize/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/prevRowDevices/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/result/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/bankSize/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/devices/CODE_DELIMITER/=/CODE_DELIMITER/coundDevices/CODE_DELIMITER/(/CODE_DELIMITER/bank/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/devices/CODE_DELIMITER/==/CODE_DELIMITER/0/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/continue/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/result/CODE_DELIMITER/+=/CODE_DELIMITER/devices/CODE_DELIMITER/*/CODE_DELIMITER/prevRowDevices/CODE_DELIMITER/;/CODE_DELIMITER/prevRowDevices/CODE_DELIMITER/=/CODE_DELIMITER/devices/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/result/CODE_DELIMITER/;/CODE_DELIMITER/}
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 *//CODE_DELIMITER/int/CODE_DELIMITER/pairSum/CODE_DELIMITER/(/CODE_DELIMITER/struct/CODE_DELIMITER/ListNode/CODE_DELIMITER/*/CODE_DELIMITER/head/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/struct/CODE_DELIMITER/ListNode/CODE_DELIMITER/*/CODE_DELIMITER/dup/CODE_DELIMITER/=/CODE_DELIMITER/head/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/count/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/,/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/,/CODE_DELIMITER/max/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/while/CODE_DELIMITER/(/CODE_DELIMITER/head/CODE_DELIMITER/!=/CODE_DELIMITER/NULL/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/count/CODE_DELIMITER/++/CODE_DELIMITER/;/CODE_DELIMITER/head/CODE_DELIMITER/=/CODE_DELIMITER/head/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/arr/CODE_DELIMITER/=/CODE_DELIMITER/malloc/CODE_DELIMITER/(/CODE_DELIMITER/count/CODE_DELIMITER/*/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/while/CODE_DELIMITER/(/CODE_DELIMITER/dup/CODE_DELIMITER/!=/CODE_DELIMITER/NULL/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/arr/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/dup/CODE_DELIMITER/->/CODE_DELIMITER/val/CODE_DELIMITER/;/CODE_DELIMITER/dup/CODE_DELIMITER/=/CODE_DELIMITER/dup/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/count/CODE_DELIMITER///CODE_DELIMITER/2/CODE_DELIMITER/;/CODE_DELIMITER/++/CODE_DELIMITER/i/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/arr/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/+/CODE_DELIMITER/arr/CODE_DELIMITER/[/CODE_DELIMITER/count/CODE_DELIMITER/-/CODE_DELIMITER/i/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/]/CODE_DELIMITER/>/CODE_DELIMITER/max/CODE_DELIMITER/)/CODE_DELIMITER/max/CODE_DELIMITER/=/CODE_DELIMITER/arr/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/+/CODE_DELIMITER/arr/CODE_DELIMITER/[/CODE_DELIMITER/count/CODE_DELIMITER/-/CODE_DELIMITER/i/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/max/CODE_DELIMITER/;/CODE_DELIMITER/}
int/CODE_DELIMITER/*/CODE_DELIMITER/cmpval/CODE_DELIMITER/(/CODE_DELIMITER/const/CODE_DELIMITER/void/CODE_DELIMITER/*/CODE_DELIMITER/a/CODE_DELIMITER/,/CODE_DELIMITER/const/CODE_DELIMITER/void/CODE_DELIMITER/*/CODE_DELIMITER/b/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/*/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/)/CODE_DELIMITER/b/CODE_DELIMITER/-/CODE_DELIMITER/*/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/)/CODE_DELIMITER/a/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/int/CODE_DELIMITER/findKthLargest/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/nums/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/numsSize/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/k/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/qsort/CODE_DELIMITER/(/CODE_DELIMITER/nums/CODE_DELIMITER/,/CODE_DELIMITER/numsSize/CODE_DELIMITER/,/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/)/CODE_DELIMITER/,/CODE_DELIMITER/cmpval/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/k/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/}
#/CODE_DELIMITER/define/CODE_DELIMITER/min/CODE_DELIMITER/(/CODE_DELIMITER/X/CODE_DELIMITER/,/CODE_DELIMITER/Y/CODE_DELIMITER/)/CODE_DELIMITER/(/CODE_DELIMITER/(/CODE_DELIMITER/X/CODE_DELIMITER/)/CODE_DELIMITER/</CODE_DELIMITER/(/CODE_DELIMITER/Y/CODE_DELIMITER/)/CODE_DELIMITER/?/CODE_DELIMITER/(/CODE_DELIMITER/X/CODE_DELIMITER/)/CODE_DELIMITER/:/CODE_DELIMITER/(/CODE_DELIMITER/Y/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/int/CODE_DELIMITER/intersectionSize/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/p11/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/p12/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/p21/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/p22/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/p11/CODE_DELIMITER/>=/CODE_DELIMITER/p22/CODE_DELIMITER/||/CODE_DELIMITER/p12/CODE_DELIMITER/<=/CODE_DELIMITER/p21/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/p11/CODE_DELIMITER/</CODE_DELIMITER/p21/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/min/CODE_DELIMITER/(/CODE_DELIMITER/p12/CODE_DELIMITER/-/CODE_DELIMITER/p21/CODE_DELIMITER/,/CODE_DELIMITER/p22/CODE_DELIMITER/-/CODE_DELIMITER/p21/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/min/CODE_DELIMITER/(/CODE_DELIMITER/p22/CODE_DELIMITER/-/CODE_DELIMITER/p11/CODE_DELIMITER/,/CODE_DELIMITER/p12/CODE_DELIMITER/-/CODE_DELIMITER/p11/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/// Calculation area of the A, then area of the B then minus intersection of A and B/CODE_DELIMITER/// Runtime: O(1)/CODE_DELIMITER/// Space: O(1)/CODE_DELIMITER/int/CODE_DELIMITER/computeArea/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/ax1/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/ay1/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/ax2/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/ay2/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/bx1/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/by1/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/bx2/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/by2/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/areaA/CODE_DELIMITER/=/CODE_DELIMITER/(/CODE_DELIMITER/ay2/CODE_DELIMITER/-/CODE_DELIMITER/ay1/CODE_DELIMITER/)/CODE_DELIMITER/*/CODE_DELIMITER/(/CODE_DELIMITER/ax2/CODE_DELIMITER/-/CODE_DELIMITER/ax1/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/areaB/CODE_DELIMITER/=/CODE_DELIMITER/(/CODE_DELIMITER/by2/CODE_DELIMITER/-/CODE_DELIMITER/by1/CODE_DELIMITER/)/CODE_DELIMITER/*/CODE_DELIMITER/(/CODE_DELIMITER/bx2/CODE_DELIMITER/-/CODE_DELIMITER/bx1/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/areaInteresection/CODE_DELIMITER/=/CODE_DELIMITER/intersectionSize/CODE_DELIMITER/(/CODE_DELIMITER/ax1/CODE_DELIMITER/,/CODE_DELIMITER/ax2/CODE_DELIMITER/,/CODE_DELIMITER/bx1/CODE_DELIMITER/,/CODE_DELIMITER/bx2/CODE_DELIMITER/)/CODE_DELIMITER/*/CODE_DELIMITER/intersectionSize/CODE_DELIMITER/(/CODE_DELIMITER/ay1/CODE_DELIMITER/,/CODE_DELIMITER/ay2/CODE_DELIMITER/,/CODE_DELIMITER/by1/CODE_DELIMITER/,/CODE_DELIMITER/by2/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/areaA/CODE_DELIMITER/+/CODE_DELIMITER/areaB/CODE_DELIMITER/-/CODE_DELIMITER/areaInteresection/CODE_DELIMITER/;/CODE_DELIMITER/}
// Prefix sum./CODE_DELIMITER/// - Calculate whole nums sum./CODE_DELIMITER/// - Calculate currIndex sum./CODE_DELIMITER/// - Compare averages/CODE_DELIMITER/// Runtime: O(n)/CODE_DELIMITER/// Space: O(1)/CODE_DELIMITER/int/CODE_DELIMITER/minimumAverageDifference/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/nums/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/numsSize/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/long/CODE_DELIMITER/numsSum/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/numsSize/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/numsSum/CODE_DELIMITER/+=/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/long/CODE_DELIMITER/currSum/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/long/CODE_DELIMITER/minAverage/CODE_DELIMITER/=/CODE_DELIMITER/9223372036854775807/CODE_DELIMITER/;/CODE_DELIMITER/// Long max/CODE_DELIMITER/int/CODE_DELIMITER/minIndex/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/numsSize/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/currSum/CODE_DELIMITER/+=/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/leftItemsNumber/CODE_DELIMITER/=/CODE_DELIMITER/(/CODE_DELIMITER/numsSize/CODE_DELIMITER/-/CODE_DELIMITER/i/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/long/CODE_DELIMITER/leftItemsNumberAverage/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/leftItemsNumber/CODE_DELIMITER/!=/CODE_DELIMITER/0/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/leftItemsNumberAverage/CODE_DELIMITER/=/CODE_DELIMITER/(/CODE_DELIMITER/numsSum/CODE_DELIMITER/-/CODE_DELIMITER/currSum/CODE_DELIMITER/)/CODE_DELIMITER///CODE_DELIMITER/leftItemsNumber/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/long/CODE_DELIMITER/currItemsNumberAverage/CODE_DELIMITER/=/CODE_DELIMITER/currSum/CODE_DELIMITER///CODE_DELIMITER/(/CODE_DELIMITER/i/CODE_DELIMITER/+/CODE_DELIMITER/1/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/long/CODE_DELIMITER/averageDiff/CODE_DELIMITER/=/CODE_DELIMITER/abs/CODE_DELIMITER/(/CODE_DELIMITER/currItemsNumberAverage/CODE_DELIMITER/-/CODE_DELIMITER/leftItemsNumberAverage/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/averageDiff/CODE_DELIMITER/</CODE_DELIMITER/minAverage/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/minAverage/CODE_DELIMITER/=/CODE_DELIMITER/averageDiff/CODE_DELIMITER/;/CODE_DELIMITER/minIndex/CODE_DELIMITER/=/CODE_DELIMITER/i/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/minIndex/CODE_DELIMITER/;/CODE_DELIMITER/}
// Prefix sum./CODE_DELIMITER/// Collect sum fromleft part and compare it with left sum./CODE_DELIMITER/// Runtime: O(n)/CODE_DELIMITER/// Space: O(1)/CODE_DELIMITER/int/CODE_DELIMITER/waysToSplitArray/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/nums/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/numsSize/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/long/CODE_DELIMITER/sumNums/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/numsSize/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/sumNums/CODE_DELIMITER/+=/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/long/CODE_DELIMITER/prefixSum/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/result/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/numsSize/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/prefixSum/CODE_DELIMITER/+=/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/prefixSum/CODE_DELIMITER/>=/CODE_DELIMITER/sumNums/CODE_DELIMITER/-/CODE_DELIMITER/prefixSum/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/result/CODE_DELIMITER/+=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/result/CODE_DELIMITER/;/CODE_DELIMITER/}
int/CODE_DELIMITER/compare/CODE_DELIMITER/(/CODE_DELIMITER/const/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/i/CODE_DELIMITER/,/CODE_DELIMITER/const/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/j/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/*/CODE_DELIMITER/i/CODE_DELIMITER/-/CODE_DELIMITER/*/CODE_DELIMITER/j/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/// Sorting./CODE_DELIMITER/// Runtime: O(n*log(n))/CODE_DELIMITER/// Space: O(n)/CODE_DELIMITER/int/CODE_DELIMITER/maximumBags/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/capacity/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/capacitySize/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/rocks/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/rocksSize/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/additionalRocks/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/capacityLeft/CODE_DELIMITER/=/CODE_DELIMITER/malloc/CODE_DELIMITER/(/CODE_DELIMITER/capacitySize/CODE_DELIMITER/*/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/capacitySize/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/capacityLeft/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/capacity/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/-/CODE_DELIMITER/rocks/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/qsort/CODE_DELIMITER/(/CODE_DELIMITER/capacityLeft/CODE_DELIMITER/,/CODE_DELIMITER/capacitySize/CODE_DELIMITER/,/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/)/CODE_DELIMITER/,/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/(/CODE_DELIMITER/*/CODE_DELIMITER/)/CODE_DELIMITER/(/CODE_DELIMITER/const/CODE_DELIMITER/void/CODE_DELIMITER/*/CODE_DELIMITER/,/CODE_DELIMITER/const/CODE_DELIMITER/void/CODE_DELIMITER/*/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/compare/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/bags/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/capacitySize/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/additionalRocks/CODE_DELIMITER/</CODE_DELIMITER/capacityLeft/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/break/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/additionalRocks/CODE_DELIMITER/-=/CODE_DELIMITER/capacityLeft/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/bags/CODE_DELIMITER/++/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/free/CODE_DELIMITER/(/CODE_DELIMITER/capacityLeft/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/bags/CODE_DELIMITER/;/CODE_DELIMITER/}
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 *//CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/findKthSmallest/CODE_DELIMITER/(/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/node/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/k/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/node/CODE_DELIMITER/==/CODE_DELIMITER/NULL/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/NULL/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/resultNode/CODE_DELIMITER/=/CODE_DELIMITER/findKthSmallest/CODE_DELIMITER/(/CODE_DELIMITER/node/CODE_DELIMITER/->/CODE_DELIMITER/left/CODE_DELIMITER/,/CODE_DELIMITER/k/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/resultNode/CODE_DELIMITER/!=/CODE_DELIMITER/NULL/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/resultNode/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/*/CODE_DELIMITER/k/CODE_DELIMITER/-=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/*/CODE_DELIMITER/k/CODE_DELIMITER/==/CODE_DELIMITER/0/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/node/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/findKthSmallest/CODE_DELIMITER/(/CODE_DELIMITER/node/CODE_DELIMITER/->/CODE_DELIMITER/right/CODE_DELIMITER/,/CODE_DELIMITER/k/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/// Depth-First Search/CODE_DELIMITER/// Runtime: O(n)/CODE_DELIMITER/// Space: O(1)/CODE_DELIMITER/int/CODE_DELIMITER/kthSmallest/CODE_DELIMITER/(/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/root/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/k/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/findKthSmallest/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/,/CODE_DELIMITER/&/CODE_DELIMITER/k/CODE_DELIMITER/)/CODE_DELIMITER/->/CODE_DELIMITER/val/CODE_DELIMITER/;/CODE_DELIMITER/}
#/CODE_DELIMITER/define/CODE_DELIMITER/min/CODE_DELIMITER/(/CODE_DELIMITER/x/CODE_DELIMITER/,/CODE_DELIMITER/y/CODE_DELIMITER/)/CODE_DELIMITER/(/CODE_DELIMITER/(/CODE_DELIMITER/(/CODE_DELIMITER/x/CODE_DELIMITER/)/CODE_DELIMITER/</CODE_DELIMITER/(/CODE_DELIMITER/y/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/?/CODE_DELIMITER/(/CODE_DELIMITER/x/CODE_DELIMITER/)/CODE_DELIMITER/:/CODE_DELIMITER/(/CODE_DELIMITER/y/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/// DP up -> down. We are going down from gridline to gridline/CODE_DELIMITER/// and collect the minumum cost path./CODE_DELIMITER/// Runtime : O(gridSize*gridColSize*gridColSize)/CODE_DELIMITER/// Space: O(gridColSize)/CODE_DELIMITER/int/CODE_DELIMITER/minPathCost/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/*/CODE_DELIMITER/grid/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/gridSize/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/gridColSize/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/*/CODE_DELIMITER/moveCost/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/moveCostSize/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/moveCostColSize/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/dp/CODE_DELIMITER/=/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/)/CODE_DELIMITER/calloc/CODE_DELIMITER/(/CODE_DELIMITER/gridColSize/CODE_DELIMITER/[/CODE_DELIMITER/0/CODE_DELIMITER/]/CODE_DELIMITER/,/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/newDp/CODE_DELIMITER/=/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/)/CODE_DELIMITER/calloc/CODE_DELIMITER/(/CODE_DELIMITER/gridColSize/CODE_DELIMITER/[/CODE_DELIMITER/0/CODE_DELIMITER/]/CODE_DELIMITER/,/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/gridSize/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/currGridColSize/CODE_DELIMITER/=/CODE_DELIMITER/gridColSize/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/j/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/j/CODE_DELIMITER/</CODE_DELIMITER/currGridColSize/CODE_DELIMITER/;/CODE_DELIMITER/j/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/newDp/CODE_DELIMITER/[/CODE_DELIMITER/j/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/j/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/j/CODE_DELIMITER/</CODE_DELIMITER/currGridColSize/CODE_DELIMITER/;/CODE_DELIMITER/j/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/currGridItem/CODE_DELIMITER/=/CODE_DELIMITER/grid/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/[/CODE_DELIMITER/j/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/z/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/z/CODE_DELIMITER/</CODE_DELIMITER/currGridColSize/CODE_DELIMITER/;/CODE_DELIMITER/z/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/currMoveCost/CODE_DELIMITER/=/CODE_DELIMITER/dp/CODE_DELIMITER/[/CODE_DELIMITER/j/CODE_DELIMITER/]/CODE_DELIMITER/+/CODE_DELIMITER/moveCost/CODE_DELIMITER/[/CODE_DELIMITER/currGridItem/CODE_DELIMITER/]/CODE_DELIMITER/[/CODE_DELIMITER/z/CODE_DELIMITER/]/CODE_DELIMITER/+/CODE_DELIMITER/currGridItem/CODE_DELIMITER/;/CODE_DELIMITER/newDp/CODE_DELIMITER/[/CODE_DELIMITER/z/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/(/CODE_DELIMITER/newDp/CODE_DELIMITER/[/CODE_DELIMITER/z/CODE_DELIMITER/]/CODE_DELIMITER/==/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/)/CODE_DELIMITER/?/CODE_DELIMITER/currMoveCost/CODE_DELIMITER/:/CODE_DELIMITER/min/CODE_DELIMITER/(/CODE_DELIMITER/newDp/CODE_DELIMITER/[/CODE_DELIMITER/z/CODE_DELIMITER/]/CODE_DELIMITER/,/CODE_DELIMITER/currMoveCost/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/}/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/j/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/j/CODE_DELIMITER/</CODE_DELIMITER/currGridColSize/CODE_DELIMITER/;/CODE_DELIMITER/j/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/dp/CODE_DELIMITER/[/CODE_DELIMITER/j/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/newDp/CODE_DELIMITER/[/CODE_DELIMITER/j/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/}/CODE_DELIMITER/// Find minimum value./CODE_DELIMITER/int/CODE_DELIMITER/minValue/CODE_DELIMITER/=/CODE_DELIMITER/dp/CODE_DELIMITER/[/CODE_DELIMITER/0/CODE_DELIMITER/]/CODE_DELIMITER/+/CODE_DELIMITER/grid/CODE_DELIMITER/[/CODE_DELIMITER/gridSize/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/]/CODE_DELIMITER/[/CODE_DELIMITER/0/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/j/CODE_DELIMITER/=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/j/CODE_DELIMITER/</CODE_DELIMITER/gridColSize/CODE_DELIMITER/[/CODE_DELIMITER/0/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/j/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/minValue/CODE_DELIMITER/=/CODE_DELIMITER/min/CODE_DELIMITER/(/CODE_DELIMITER/minValue/CODE_DELIMITER/,/CODE_DELIMITER/dp/CODE_DELIMITER/[/CODE_DELIMITER/j/CODE_DELIMITER/]/CODE_DELIMITER/+/CODE_DELIMITER/grid/CODE_DELIMITER/[/CODE_DELIMITER/gridSize/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/]/CODE_DELIMITER/[/CODE_DELIMITER/j/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/// free resources/CODE_DELIMITER/free/CODE_DELIMITER/(/CODE_DELIMITER/dp/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/free/CODE_DELIMITER/(/CODE_DELIMITER/newDp/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/minValue/CODE_DELIMITER/;/CODE_DELIMITER/}
// Without loops/recursion./CODE_DELIMITER/// Runtime: O(1)/CODE_DELIMITER/// Space: O(1)/CODE_DELIMITER/bool/CODE_DELIMITER/isPowerOfTwo/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/n/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/(/CODE_DELIMITER/n/CODE_DELIMITER/>/CODE_DELIMITER/0/CODE_DELIMITER/)/CODE_DELIMITER/&&/CODE_DELIMITER/(/CODE_DELIMITER/(/CODE_DELIMITER/n/CODE_DELIMITER/&/CODE_DELIMITER/(/CODE_DELIMITER/n/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/==/CODE_DELIMITER/0/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 *//CODE_DELIMITER/struct/CODE_DELIMITER/ListNode/CODE_DELIMITER/*/CODE_DELIMITER/reverse/CODE_DELIMITER/(/CODE_DELIMITER/struct/CODE_DELIMITER/ListNode/CODE_DELIMITER/*/CODE_DELIMITER/head/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/struct/CODE_DELIMITER/ListNode/CODE_DELIMITER/*/CODE_DELIMITER/res/CODE_DELIMITER/=/CODE_DELIMITER/NULL/CODE_DELIMITER/;/CODE_DELIMITER/while/CODE_DELIMITER/(/CODE_DELIMITER/head/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/struct/CODE_DELIMITER/ListNode/CODE_DELIMITER/*/CODE_DELIMITER/pre_node/CODE_DELIMITER/=/CODE_DELIMITER/head/CODE_DELIMITER/;/CODE_DELIMITER/head/CODE_DELIMITER/=/CODE_DELIMITER/head/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/;/CODE_DELIMITER/pre_node/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/=/CODE_DELIMITER/res/CODE_DELIMITER/;/CODE_DELIMITER/res/CODE_DELIMITER/=/CODE_DELIMITER/pre_node/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/res/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/bool/CODE_DELIMITER/isPalindrome/CODE_DELIMITER/(/CODE_DELIMITER/struct/CODE_DELIMITER/ListNode/CODE_DELIMITER/*/CODE_DELIMITER/head/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/struct/CODE_DELIMITER/ListNode/CODE_DELIMITER/*/CODE_DELIMITER/slow/CODE_DELIMITER/=/CODE_DELIMITER/head/CODE_DELIMITER/;/CODE_DELIMITER/struct/CODE_DELIMITER/ListNode/CODE_DELIMITER/*/CODE_DELIMITER/fast/CODE_DELIMITER/=/CODE_DELIMITER/head/CODE_DELIMITER/;/CODE_DELIMITER/struct/CODE_DELIMITER/ListNode/CODE_DELIMITER/*/CODE_DELIMITER/last/CODE_DELIMITER/;/CODE_DELIMITER/while/CODE_DELIMITER/(/CODE_DELIMITER/fast/CODE_DELIMITER/&&/CODE_DELIMITER/fast/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/slow/CODE_DELIMITER/=/CODE_DELIMITER/slow/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/;/CODE_DELIMITER/fast/CODE_DELIMITER/=/CODE_DELIMITER/fast/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/fast/CODE_DELIMITER/!=/CODE_DELIMITER/NULL/CODE_DELIMITER/)/CODE_DELIMITER/slow/CODE_DELIMITER/=/CODE_DELIMITER/slow/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/;/CODE_DELIMITER/last/CODE_DELIMITER/=/CODE_DELIMITER/reverse/CODE_DELIMITER/(/CODE_DELIMITER/slow/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/while/CODE_DELIMITER/(/CODE_DELIMITER/last/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/head/CODE_DELIMITER/->/CODE_DELIMITER/val/CODE_DELIMITER/!=/CODE_DELIMITER/last/CODE_DELIMITER/->/CODE_DELIMITER/val/CODE_DELIMITER/)/CODE_DELIMITER/return/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/head/CODE_DELIMITER/=/CODE_DELIMITER/head/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/;/CODE_DELIMITER/last/CODE_DELIMITER/=/CODE_DELIMITER/last/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/}
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 *//CODE_DELIMITER/// The list for TreeNodes./CODE_DELIMITER/struct/CODE_DELIMITER/ListItem/CODE_DELIMITER/{/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/node/CODE_DELIMITER/;/CODE_DELIMITER/// TreeNode pointer/CODE_DELIMITER/struct/CODE_DELIMITER/ListItem/CODE_DELIMITER/*/CODE_DELIMITER/next/CODE_DELIMITER/;/CODE_DELIMITER/// Pointer to the next ListItem/CODE_DELIMITER/}/CODE_DELIMITER/;/CODE_DELIMITER/bool/CODE_DELIMITER/findTargetPath/CODE_DELIMITER/(/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/node/CODE_DELIMITER/,/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/target/CODE_DELIMITER/,/CODE_DELIMITER/struct/CODE_DELIMITER/ListItem/CODE_DELIMITER/*/CODE_DELIMITER/path/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/node/CODE_DELIMITER/==/CODE_DELIMITER/NULL/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/false/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/struct/CODE_DELIMITER/ListItem/CODE_DELIMITER/*/CODE_DELIMITER/pathItem/CODE_DELIMITER/=/CODE_DELIMITER/malloc/CODE_DELIMITER/(/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/struct/CODE_DELIMITER/ListItem/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/pathItem/CODE_DELIMITER/->/CODE_DELIMITER/node/CODE_DELIMITER/=/CODE_DELIMITER/node/CODE_DELIMITER/;/CODE_DELIMITER/pathItem/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/=/CODE_DELIMITER/NULL/CODE_DELIMITER/;/CODE_DELIMITER/path/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/=/CODE_DELIMITER/pathItem/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/node/CODE_DELIMITER/->/CODE_DELIMITER/val/CODE_DELIMITER/==/CODE_DELIMITER/target/CODE_DELIMITER/->/CODE_DELIMITER/val/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/true/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/findTargetPath/CODE_DELIMITER/(/CODE_DELIMITER/node/CODE_DELIMITER/->/CODE_DELIMITER/left/CODE_DELIMITER/,/CODE_DELIMITER/target/CODE_DELIMITER/,/CODE_DELIMITER/pathItem/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/true/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/findTargetPath/CODE_DELIMITER/(/CODE_DELIMITER/node/CODE_DELIMITER/->/CODE_DELIMITER/right/CODE_DELIMITER/,/CODE_DELIMITER/target/CODE_DELIMITER/,/CODE_DELIMITER/pathItem/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/true/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/path/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/=/CODE_DELIMITER/NULL/CODE_DELIMITER/;/CODE_DELIMITER/free/CODE_DELIMITER/(/CODE_DELIMITER/pathItem/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/false/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/void/CODE_DELIMITER/freeList/CODE_DELIMITER/(/CODE_DELIMITER/struct/CODE_DELIMITER/ListItem/CODE_DELIMITER/*/CODE_DELIMITER/target/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/target/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/!=/CODE_DELIMITER/NULL/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/freeList/CODE_DELIMITER/(/CODE_DELIMITER/target/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/free/CODE_DELIMITER/(/CODE_DELIMITER/target/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/// Find full path for p and q./CODE_DELIMITER/// Find the longest common path in paths./CODE_DELIMITER/// Runtime: O(n)/CODE_DELIMITER/// Space: O(n)/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/lowestCommonAncestor/CODE_DELIMITER/(/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/root/CODE_DELIMITER/,/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/p/CODE_DELIMITER/,/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/q/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/struct/CODE_DELIMITER/ListItem/CODE_DELIMITER/*/CODE_DELIMITER/pPath/CODE_DELIMITER/=/CODE_DELIMITER/malloc/CODE_DELIMITER/(/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/struct/CODE_DELIMITER/ListItem/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/struct/CODE_DELIMITER/ListItem/CODE_DELIMITER/*/CODE_DELIMITER/qPath/CODE_DELIMITER/=/CODE_DELIMITER/malloc/CODE_DELIMITER/(/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/struct/CODE_DELIMITER/ListItem/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/findTargetPath/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/,/CODE_DELIMITER/p/CODE_DELIMITER/,/CODE_DELIMITER/pPath/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/findTargetPath/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/,/CODE_DELIMITER/q/CODE_DELIMITER/,/CODE_DELIMITER/qPath/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/lowestTreeNode/CODE_DELIMITER/=/CODE_DELIMITER/NULL/CODE_DELIMITER/;/CODE_DELIMITER/struct/CODE_DELIMITER/ListItem/CODE_DELIMITER/*/CODE_DELIMITER/pPathCursor/CODE_DELIMITER/=/CODE_DELIMITER/pPath/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/;/CODE_DELIMITER/struct/CODE_DELIMITER/ListItem/CODE_DELIMITER/*/CODE_DELIMITER/qPathCursor/CODE_DELIMITER/=/CODE_DELIMITER/qPath/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/;/CODE_DELIMITER/while/CODE_DELIMITER/(/CODE_DELIMITER/pPathCursor/CODE_DELIMITER/!=/CODE_DELIMITER/NULL/CODE_DELIMITER/&&/CODE_DELIMITER/qPathCursor/CODE_DELIMITER/!=/CODE_DELIMITER/NULL/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/pPathCursor/CODE_DELIMITER/->/CODE_DELIMITER/node/CODE_DELIMITER/->/CODE_DELIMITER/val/CODE_DELIMITER/==/CODE_DELIMITER/qPathCursor/CODE_DELIMITER/->/CODE_DELIMITER/node/CODE_DELIMITER/->/CODE_DELIMITER/val/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/lowestTreeNode/CODE_DELIMITER/=/CODE_DELIMITER/pPathCursor/CODE_DELIMITER/->/CODE_DELIMITER/node/CODE_DELIMITER/;/CODE_DELIMITER/pPathCursor/CODE_DELIMITER/=/CODE_DELIMITER/pPathCursor/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/;/CODE_DELIMITER/qPathCursor/CODE_DELIMITER/=/CODE_DELIMITER/qPathCursor/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/;/CODE_DELIMITER/continue/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/break/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/freeList/CODE_DELIMITER/(/CODE_DELIMITER/pPath/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/freeList/CODE_DELIMITER/(/CODE_DELIMITER/qPath/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/lowestTreeNode/CODE_DELIMITER/;/CODE_DELIMITER/}
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 *//CODE_DELIMITER/#/CODE_DELIMITER/define/CODE_DELIMITER/max/CODE_DELIMITER/(/CODE_DELIMITER/a/CODE_DELIMITER/,/CODE_DELIMITER/b/CODE_DELIMITER/)/CODE_DELIMITER/(/CODE_DELIMITER/(/CODE_DELIMITER/(/CODE_DELIMITER/a/CODE_DELIMITER/)/CODE_DELIMITER/>/CODE_DELIMITER/(/CODE_DELIMITER/b/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/?/CODE_DELIMITER/(/CODE_DELIMITER/a/CODE_DELIMITER/)/CODE_DELIMITER/:/CODE_DELIMITER/(/CODE_DELIMITER/b/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/int/CODE_DELIMITER/recursiveSolve/CODE_DELIMITER/(/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/node/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/result/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/node/CODE_DELIMITER/==/CODE_DELIMITER/NULL/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/int/CODE_DELIMITER/leftSum/CODE_DELIMITER/=/CODE_DELIMITER/max/CODE_DELIMITER/(/CODE_DELIMITER/recursiveSolve/CODE_DELIMITER/(/CODE_DELIMITER/node/CODE_DELIMITER/->/CODE_DELIMITER/left/CODE_DELIMITER/,/CODE_DELIMITER/result/CODE_DELIMITER/)/CODE_DELIMITER/,/CODE_DELIMITER/0/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/rightSum/CODE_DELIMITER/=/CODE_DELIMITER/max/CODE_DELIMITER/(/CODE_DELIMITER/recursiveSolve/CODE_DELIMITER/(/CODE_DELIMITER/node/CODE_DELIMITER/->/CODE_DELIMITER/right/CODE_DELIMITER/,/CODE_DELIMITER/result/CODE_DELIMITER/)/CODE_DELIMITER/,/CODE_DELIMITER/0/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/// Check if it's possible to make a maximum path from left right and current node/CODE_DELIMITER/int/CODE_DELIMITER/maxValueNode/CODE_DELIMITER/=/CODE_DELIMITER/node/CODE_DELIMITER/->/CODE_DELIMITER/val/CODE_DELIMITER/+/CODE_DELIMITER/leftSum/CODE_DELIMITER/+/CODE_DELIMITER/rightSum/CODE_DELIMITER/;/CODE_DELIMITER/*/CODE_DELIMITER/result/CODE_DELIMITER/=/CODE_DELIMITER/max/CODE_DELIMITER/(/CODE_DELIMITER/maxValueNode/CODE_DELIMITER/,/CODE_DELIMITER/*/CODE_DELIMITER/result/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/// Choose the max sum val path /CODE_DELIMITER/return/CODE_DELIMITER/node/CODE_DELIMITER/->/CODE_DELIMITER/val/CODE_DELIMITER/+/CODE_DELIMITER/max/CODE_DELIMITER/(/CODE_DELIMITER/leftSum/CODE_DELIMITER/,/CODE_DELIMITER/rightSum/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/// Depth First Search/CODE_DELIMITER/// Runtime: O(n), n - the number of nodes in tree./CODE_DELIMITER/// Space: O(1)/CODE_DELIMITER/int/CODE_DELIMITER/maxPathSum/CODE_DELIMITER/(/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/root/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/const/CODE_DELIMITER/int/CODE_DELIMITER/LOWER_BOUND/CODE_DELIMITER/=/CODE_DELIMITER/-/CODE_DELIMITER/2147483648/CODE_DELIMITER/int/CODE_DELIMITER/result/CODE_DELIMITER/=/CODE_DELIMITER/LOWER_BOUND/CODE_DELIMITER/;/CODE_DELIMITER/recursiveSolve/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/,/CODE_DELIMITER/&/CODE_DELIMITER/result/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/result/CODE_DELIMITER/;/CODE_DELIMITER/}
/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 *//CODE_DELIMITER/// Calculating ones on each row and column./CODE_DELIMITER/// Runtime: O(n * m)/CODE_DELIMITER/// Space: O(n + m)/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/*/CODE_DELIMITER/onesMinusZeros/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/*/CODE_DELIMITER/grid/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/gridSize/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/gridColSize/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/returnSize/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/*/CODE_DELIMITER/returnColumnSizes/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/n/CODE_DELIMITER/=/CODE_DELIMITER/gridSize/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/m/CODE_DELIMITER/=/CODE_DELIMITER/gridColSize/CODE_DELIMITER/[/CODE_DELIMITER/0/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/*/CODE_DELIMITER/result/CODE_DELIMITER/=/CODE_DELIMITER/malloc/CODE_DELIMITER/(/CODE_DELIMITER/gridSize/CODE_DELIMITER/*/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/n/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/result/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/malloc/CODE_DELIMITER/(/CODE_DELIMITER/m/CODE_DELIMITER/*/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/onesRows/CODE_DELIMITER/=/CODE_DELIMITER/calloc/CODE_DELIMITER/(/CODE_DELIMITER/n/CODE_DELIMITER/,/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/onesCols/CODE_DELIMITER/=/CODE_DELIMITER/calloc/CODE_DELIMITER/(/CODE_DELIMITER/m/CODE_DELIMITER/,/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/n/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/j/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/j/CODE_DELIMITER/</CODE_DELIMITER/m/CODE_DELIMITER/;/CODE_DELIMITER/j/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/grid/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/[/CODE_DELIMITER/j/CODE_DELIMITER/]/CODE_DELIMITER/==/CODE_DELIMITER/1/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/onesRows/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/+=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/onesCols/CODE_DELIMITER/[/CODE_DELIMITER/j/CODE_DELIMITER/]/CODE_DELIMITER/+=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/}/CODE_DELIMITER/}/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/gridSize/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/j/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/j/CODE_DELIMITER/</CODE_DELIMITER/gridColSize/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/j/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/result/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/[/CODE_DELIMITER/j/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/onesRows/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/+/CODE_DELIMITER/onesCols/CODE_DELIMITER/[/CODE_DELIMITER/j/CODE_DELIMITER/]/CODE_DELIMITER/-/CODE_DELIMITER/(/CODE_DELIMITER/m/CODE_DELIMITER/-/CODE_DELIMITER/onesRows/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/-/CODE_DELIMITER/(/CODE_DELIMITER/n/CODE_DELIMITER/-/CODE_DELIMITER/onesCols/CODE_DELIMITER/[/CODE_DELIMITER/j/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/}/CODE_DELIMITER/free/CODE_DELIMITER/(/CODE_DELIMITER/onesRows/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/free/CODE_DELIMITER/(/CODE_DELIMITER/onesCols/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/*/CODE_DELIMITER/returnSize/CODE_DELIMITER/=/CODE_DELIMITER/gridSize/CODE_DELIMITER/;/CODE_DELIMITER/*/CODE_DELIMITER/returnColumnSizes/CODE_DELIMITER/=/CODE_DELIMITER/gridColSize/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/result/CODE_DELIMITER/;/CODE_DELIMITER/}
#/CODE_DELIMITER/define/CODE_DELIMITER/max/CODE_DELIMITER/(/CODE_DELIMITER/a/CODE_DELIMITER/,/CODE_DELIMITER/b/CODE_DELIMITER/)/CODE_DELIMITER/(/CODE_DELIMITER/(/CODE_DELIMITER/(/CODE_DELIMITER/a/CODE_DELIMITER/)/CODE_DELIMITER/>/CODE_DELIMITER/(/CODE_DELIMITER/b/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/?/CODE_DELIMITER/(/CODE_DELIMITER/a/CODE_DELIMITER/)/CODE_DELIMITER/:/CODE_DELIMITER/(/CODE_DELIMITER/b/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/int/CODE_DELIMITER/longestSquareStreakDp/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/numsSet/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/numsSetSize/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/dp/CODE_DELIMITER/,/CODE_DELIMITER/long/CODE_DELIMITER/num/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/dp/CODE_DELIMITER/[/CODE_DELIMITER/num/CODE_DELIMITER/]/CODE_DELIMITER/!=/CODE_DELIMITER/0/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/dp/CODE_DELIMITER/[/CODE_DELIMITER/num/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/long/CODE_DELIMITER/numSquare/CODE_DELIMITER/=/CODE_DELIMITER/num/CODE_DELIMITER/*/CODE_DELIMITER/num/CODE_DELIMITER/;/CODE_DELIMITER/dp/CODE_DELIMITER/[/CODE_DELIMITER/num/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/numSquare/CODE_DELIMITER/<=/CODE_DELIMITER/numsSetSize/CODE_DELIMITER/&&/CODE_DELIMITER/numsSet/CODE_DELIMITER/[/CODE_DELIMITER/numSquare/CODE_DELIMITER/]/CODE_DELIMITER/==/CODE_DELIMITER/1/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/dp/CODE_DELIMITER/[/CODE_DELIMITER/num/CODE_DELIMITER/]/CODE_DELIMITER/+=/CODE_DELIMITER/longestSquareStreakDp/CODE_DELIMITER/(/CODE_DELIMITER/numsSet/CODE_DELIMITER/,/CODE_DELIMITER/numsSetSize/CODE_DELIMITER/,/CODE_DELIMITER/dp/CODE_DELIMITER/,/CODE_DELIMITER/numSquare/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/dp/CODE_DELIMITER/[/CODE_DELIMITER/num/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/// Dynamic approach. Up -> down./CODE_DELIMITER/// Runtime: O(numsSize)/CODE_DELIMITER/// Space: O(max(nums))/CODE_DELIMITER/int/CODE_DELIMITER/longestSquareStreak/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/nums/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/numsSize/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/// Find nums maximum/CODE_DELIMITER/int/CODE_DELIMITER/numMax/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/numsSize/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/numMax/CODE_DELIMITER/=/CODE_DELIMITER/max/CODE_DELIMITER/(/CODE_DELIMITER/numMax/CODE_DELIMITER/,/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/numsSet/CODE_DELIMITER/=/CODE_DELIMITER/calloc/CODE_DELIMITER/(/CODE_DELIMITER/numMax/CODE_DELIMITER/+/CODE_DELIMITER/1/CODE_DELIMITER/,/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/dp/CODE_DELIMITER/=/CODE_DELIMITER/calloc/CODE_DELIMITER/(/CODE_DELIMITER/numMax/CODE_DELIMITER/+/CODE_DELIMITER/1/CODE_DELIMITER/,/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/// Init set of nums/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/numsSize/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/numsSet/CODE_DELIMITER/[/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/// Find result/CODE_DELIMITER/int/CODE_DELIMITER/result/CODE_DELIMITER/=/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/numsSize/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/long/CODE_DELIMITER/num/CODE_DELIMITER/=/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/long/CODE_DELIMITER/numSquare/CODE_DELIMITER/=/CODE_DELIMITER/num/CODE_DELIMITER/*/CODE_DELIMITER/num/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/numSquare/CODE_DELIMITER/>/CODE_DELIMITER/numMax/CODE_DELIMITER/||/CODE_DELIMITER/numsSet/CODE_DELIMITER/[/CODE_DELIMITER/numSquare/CODE_DELIMITER/]/CODE_DELIMITER/==/CODE_DELIMITER/0/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/continue/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/result/CODE_DELIMITER/=/CODE_DELIMITER/max/CODE_DELIMITER/(/CODE_DELIMITER/result/CODE_DELIMITER/,/CODE_DELIMITER/1/CODE_DELIMITER/+/CODE_DELIMITER/longestSquareStreakDp/CODE_DELIMITER/(/CODE_DELIMITER/numsSet/CODE_DELIMITER/,/CODE_DELIMITER/numMax/CODE_DELIMITER/,/CODE_DELIMITER/dp/CODE_DELIMITER/,/CODE_DELIMITER/numSquare/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/free/CODE_DELIMITER/(/CODE_DELIMITER/dp/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/free/CODE_DELIMITER/(/CODE_DELIMITER/numsSet/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/result/CODE_DELIMITER/;/CODE_DELIMITER/}
#/CODE_DELIMITER/define/CODE_DELIMITER/max/CODE_DELIMITER/(/CODE_DELIMITER/a/CODE_DELIMITER/,/CODE_DELIMITER/b/CODE_DELIMITER/)/CODE_DELIMITER/(/CODE_DELIMITER/(/CODE_DELIMITER/(/CODE_DELIMITER/a/CODE_DELIMITER/)/CODE_DELIMITER/>/CODE_DELIMITER/(/CODE_DELIMITER/b/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/?/CODE_DELIMITER/(/CODE_DELIMITER/a/CODE_DELIMITER/)/CODE_DELIMITER/:/CODE_DELIMITER/(/CODE_DELIMITER/b/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/long/CODE_DELIMITER/getSum/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/nums/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/numsSize/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/divizor/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/long/CODE_DELIMITER/result/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/numsSize/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/value/CODE_DELIMITER/=/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER///CODE_DELIMITER/divizor/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/value/CODE_DELIMITER/*/CODE_DELIMITER/divizor/CODE_DELIMITER/!=/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/value/CODE_DELIMITER/++/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/result/CODE_DELIMITER/+=/CODE_DELIMITER/value/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/result/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/// Divide and conquer/CODE_DELIMITER/// Runtime: O(n*log(n))/CODE_DELIMITER/// Space: O(1)/CODE_DELIMITER/int/CODE_DELIMITER/smallestDivisor/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/nums/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/numsSize/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/threshold/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/maxNum/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/numsSize/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/maxNum/CODE_DELIMITER/=/CODE_DELIMITER/max/CODE_DELIMITER/(/CODE_DELIMITER/maxNum/CODE_DELIMITER/,/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/int/CODE_DELIMITER/left/CODE_DELIMITER/=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/right/CODE_DELIMITER/=/CODE_DELIMITER/maxNum/CODE_DELIMITER/;/CODE_DELIMITER/while/CODE_DELIMITER/(/CODE_DELIMITER/left/CODE_DELIMITER/<=/CODE_DELIMITER/right/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/middle/CODE_DELIMITER/=/CODE_DELIMITER/(/CODE_DELIMITER/left/CODE_DELIMITER/+/CODE_DELIMITER/right/CODE_DELIMITER/)/CODE_DELIMITER///CODE_DELIMITER/2/CODE_DELIMITER/;/CODE_DELIMITER/long/CODE_DELIMITER/middleSum/CODE_DELIMITER/=/CODE_DELIMITER/getSum/CODE_DELIMITER/(/CODE_DELIMITER/nums/CODE_DELIMITER/,/CODE_DELIMITER/numsSize/CODE_DELIMITER/,/CODE_DELIMITER/middle/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/middleSum/CODE_DELIMITER/<=/CODE_DELIMITER/threshold/CODE_DELIMITER/&&/CODE_DELIMITER/(/CODE_DELIMITER/middle/CODE_DELIMITER/==/CODE_DELIMITER/1/CODE_DELIMITER/||/CODE_DELIMITER/getSum/CODE_DELIMITER/(/CODE_DELIMITER/nums/CODE_DELIMITER/,/CODE_DELIMITER/numsSize/CODE_DELIMITER/,/CODE_DELIMITER/middle/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/)/CODE_DELIMITER/>/CODE_DELIMITER/threshold/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/middle/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/middleSum/CODE_DELIMITER/>/CODE_DELIMITER/threshold/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/left/CODE_DELIMITER/=/CODE_DELIMITER/middle/CODE_DELIMITER/+/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/else/CODE_DELIMITER/{/CODE_DELIMITER/right/CODE_DELIMITER/=/CODE_DELIMITER/middle/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/}
int/CODE_DELIMITER/max/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/a/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/b/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/a/CODE_DELIMITER/>=/CODE_DELIMITER/b/CODE_DELIMITER/?/CODE_DELIMITER/a/CODE_DELIMITER/:/CODE_DELIMITER/b/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/int/CODE_DELIMITER/height/CODE_DELIMITER/(/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/root/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/==/CODE_DELIMITER/NULL/CODE_DELIMITER/)/CODE_DELIMITER/return/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/else/CODE_DELIMITER/return/CODE_DELIMITER/1/CODE_DELIMITER/+/CODE_DELIMITER/max/CODE_DELIMITER/(/CODE_DELIMITER/height/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/left/CODE_DELIMITER/)/CODE_DELIMITER/,/CODE_DELIMITER/height/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/right/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/bool/CODE_DELIMITER/isBalanced/CODE_DELIMITER/(/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/root/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/==/CODE_DELIMITER/NULL/CODE_DELIMITER/)/CODE_DELIMITER/return/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/left/CODE_DELIMITER/=/CODE_DELIMITER/height/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/left/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/right/CODE_DELIMITER/=/CODE_DELIMITER/height/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/right/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/abs/CODE_DELIMITER/(/CODE_DELIMITER/left/CODE_DELIMITER/-/CODE_DELIMITER/right/CODE_DELIMITER/)/CODE_DELIMITER/<=/CODE_DELIMITER/1/CODE_DELIMITER/&&/CODE_DELIMITER/isBalanced/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/left/CODE_DELIMITER/)/CODE_DELIMITER/&&/CODE_DELIMITER/isBalanced/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/right/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}
int/CODE_DELIMITER/diff/CODE_DELIMITER/(/CODE_DELIMITER/const/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/i/CODE_DELIMITER/,/CODE_DELIMITER/const/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/j/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/*/CODE_DELIMITER/i/CODE_DELIMITER/-/CODE_DELIMITER/*/CODE_DELIMITER/j/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/// Sorting./CODE_DELIMITER/// Runtime: O(n*log(n))/CODE_DELIMITER/// Space: O(1)/CODE_DELIMITER/int/CODE_DELIMITER/hIndex/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/citations/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/citationsSize/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/qsort/CODE_DELIMITER/(/CODE_DELIMITER/citations/CODE_DELIMITER/,/CODE_DELIMITER/citationsSize/CODE_DELIMITER/,/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/)/CODE_DELIMITER/,/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/(/CODE_DELIMITER/*/CODE_DELIMITER/)/CODE_DELIMITER/(/CODE_DELIMITER/const/CODE_DELIMITER/void/CODE_DELIMITER/*/CODE_DELIMITER/,/CODE_DELIMITER/const/CODE_DELIMITER/void/CODE_DELIMITER/*/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/diff/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/citationsSize/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/citations/CODE_DELIMITER/[/CODE_DELIMITER/citationsSize/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/-/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/<=/CODE_DELIMITER/i/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/i/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/citationsSize/CODE_DELIMITER/;/CODE_DELIMITER/}
void/CODE_DELIMITER/moveZeroes/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/nums/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/numsSize/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/,/CODE_DELIMITER/start/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/numsSize/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/start/CODE_DELIMITER/++/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/start/CODE_DELIMITER/;/CODE_DELIMITER/start/CODE_DELIMITER/</CODE_DELIMITER/numsSize/CODE_DELIMITER/;/CODE_DELIMITER/start/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/start/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/}
int/CODE_DELIMITER/cmpval/CODE_DELIMITER/(/CODE_DELIMITER/const/CODE_DELIMITER/void/CODE_DELIMITER/*/CODE_DELIMITER/a/CODE_DELIMITER/,/CODE_DELIMITER/const/CODE_DELIMITER/void/CODE_DELIMITER/*/CODE_DELIMITER/b/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/*/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/)/CODE_DELIMITER/a/CODE_DELIMITER/-/CODE_DELIMITER/*/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/)/CODE_DELIMITER/b/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/int/CODE_DELIMITER/findDuplicate/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/nums/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/numsSize/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/;/CODE_DELIMITER/qsort/CODE_DELIMITER/(/CODE_DELIMITER/nums/CODE_DELIMITER/,/CODE_DELIMITER/numsSize/CODE_DELIMITER/,/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/)/CODE_DELIMITER/,/CODE_DELIMITER/cmpval/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/numsSize/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/==/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/+/CODE_DELIMITER/1/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/return/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/}
bool/CODE_DELIMITER/hasPathSum/CODE_DELIMITER/(/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/root/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/sum/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/==/CODE_DELIMITER/NULL/CODE_DELIMITER/)/CODE_DELIMITER/return/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/!/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/left/CODE_DELIMITER/&&/CODE_DELIMITER/!/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/right/CODE_DELIMITER/&&/CODE_DELIMITER/sum/CODE_DELIMITER/-/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/val/CODE_DELIMITER/==/CODE_DELIMITER/0/CODE_DELIMITER/)/CODE_DELIMITER/return/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/hasPathSum/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/left/CODE_DELIMITER/,/CODE_DELIMITER/sum/CODE_DELIMITER/-/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/val/CODE_DELIMITER/)/CODE_DELIMITER/||/CODE_DELIMITER/hasPathSum/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/right/CODE_DELIMITER/,/CODE_DELIMITER/sum/CODE_DELIMITER/-/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/val/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 *//CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/bstFromPreorder/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/preorder/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/preorderSize/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/new/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/left_ptr/CODE_DELIMITER/;/CODE_DELIMITER/new/CODE_DELIMITER/=/CODE_DELIMITER/malloc/CODE_DELIMITER/(/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/new/CODE_DELIMITER/->/CODE_DELIMITER/val/CODE_DELIMITER/=/CODE_DELIMITER/preorder/CODE_DELIMITER/[/CODE_DELIMITER/0/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/preorderSize/CODE_DELIMITER/==/CODE_DELIMITER/1/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/new/CODE_DELIMITER/->/CODE_DELIMITER/right/CODE_DELIMITER/=/CODE_DELIMITER/NULL/CODE_DELIMITER/;/CODE_DELIMITER/new/CODE_DELIMITER/->/CODE_DELIMITER/left/CODE_DELIMITER/=/CODE_DELIMITER/NULL/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/new/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/left_ptr/CODE_DELIMITER/=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/while/CODE_DELIMITER/(/CODE_DELIMITER/(/CODE_DELIMITER/left_ptr/CODE_DELIMITER/</CODE_DELIMITER/preorderSize/CODE_DELIMITER/)/CODE_DELIMITER/&&/CODE_DELIMITER/(/CODE_DELIMITER/preorder/CODE_DELIMITER/[/CODE_DELIMITER/left_ptr/CODE_DELIMITER/]/CODE_DELIMITER/</CODE_DELIMITER/preorder/CODE_DELIMITER/[/CODE_DELIMITER/0/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/left_ptr/CODE_DELIMITER/++/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/left_ptr/CODE_DELIMITER/==/CODE_DELIMITER/1/CODE_DELIMITER/)/CODE_DELIMITER/new/CODE_DELIMITER/->/CODE_DELIMITER/left/CODE_DELIMITER/=/CODE_DELIMITER/NULL/CODE_DELIMITER/;/CODE_DELIMITER/else/CODE_DELIMITER/new/CODE_DELIMITER/->/CODE_DELIMITER/left/CODE_DELIMITER/=/CODE_DELIMITER/bstFromPreorder/CODE_DELIMITER/(/CODE_DELIMITER/preorder/CODE_DELIMITER/+/CODE_DELIMITER/1/CODE_DELIMITER/,/CODE_DELIMITER/left_ptr/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/left_ptr/CODE_DELIMITER/</CODE_DELIMITER/preorderSize/CODE_DELIMITER/)/CODE_DELIMITER/new/CODE_DELIMITER/->/CODE_DELIMITER/right/CODE_DELIMITER/=/CODE_DELIMITER/bstFromPreorder/CODE_DELIMITER/(/CODE_DELIMITER/preorder/CODE_DELIMITER/+/CODE_DELIMITER/left_ptr/CODE_DELIMITER/,/CODE_DELIMITER/preorderSize/CODE_DELIMITER/-/CODE_DELIMITER/left_ptr/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/else/CODE_DELIMITER/new/CODE_DELIMITER/->/CODE_DELIMITER/right/CODE_DELIMITER/=/CODE_DELIMITER/NULL/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/new/CODE_DELIMITER/;/CODE_DELIMITER/}
// Counting whole summ. evens sums number and odd summs number./CODE_DELIMITER/// Runtime: O(n),/CODE_DELIMITER/// Space: O(1)/CODE_DELIMITER/int/CODE_DELIMITER/numOfSubarrays/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/arr/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/arrSize/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/result/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/curSumm/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/currOddSumms/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/currEvenSumm/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/modulo/CODE_DELIMITER/=/CODE_DELIMITER/1000000000/CODE_DELIMITER/+/CODE_DELIMITER/7/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/arrSize/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/curSumm/CODE_DELIMITER/+=/CODE_DELIMITER/arr/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/curSumm/CODE_DELIMITER/%/CODE_DELIMITER/2/CODE_DELIMITER/==/CODE_DELIMITER/0/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/currEvenSumm/CODE_DELIMITER/++/CODE_DELIMITER/;/CODE_DELIMITER/result/CODE_DELIMITER/=/CODE_DELIMITER/(/CODE_DELIMITER/result/CODE_DELIMITER/+/CODE_DELIMITER/currOddSumms/CODE_DELIMITER/)/CODE_DELIMITER/%/CODE_DELIMITER/modulo/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/else/CODE_DELIMITER/{/CODE_DELIMITER/currOddSumms/CODE_DELIMITER/++/CODE_DELIMITER/;/CODE_DELIMITER/result/CODE_DELIMITER/=/CODE_DELIMITER/(/CODE_DELIMITER/result/CODE_DELIMITER/+/CODE_DELIMITER/1/CODE_DELIMITER/+/CODE_DELIMITER/currEvenSumm/CODE_DELIMITER/)/CODE_DELIMITER/%/CODE_DELIMITER/modulo/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/result/CODE_DELIMITER/%/CODE_DELIMITER/modulo/CODE_DELIMITER/;/CODE_DELIMITER/}
void/CODE_DELIMITER/reverseString/CODE_DELIMITER/(/CODE_DELIMITER/char/CODE_DELIMITER/*/CODE_DELIMITER/s/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/sSize/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/last/CODE_DELIMITER/=/CODE_DELIMITER/sSize/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/,/CODE_DELIMITER/i/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/last/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/char/CODE_DELIMITER/tmp/CODE_DELIMITER/=/CODE_DELIMITER/s/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/s/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/s/CODE_DELIMITER/[/CODE_DELIMITER/last/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/s/CODE_DELIMITER/[/CODE_DELIMITER/last/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/tmp/CODE_DELIMITER/;/CODE_DELIMITER/last/CODE_DELIMITER/--/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/}
struct/CODE_DELIMITER/ListNode/CODE_DELIMITER/*/CODE_DELIMITER/getIntersectionNode/CODE_DELIMITER/(/CODE_DELIMITER/struct/CODE_DELIMITER/ListNode/CODE_DELIMITER/*/CODE_DELIMITER/headA/CODE_DELIMITER/,/CODE_DELIMITER/struct/CODE_DELIMITER/ListNode/CODE_DELIMITER/*/CODE_DELIMITER/headB/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/struct/CODE_DELIMITER/ListNode/CODE_DELIMITER/*/CODE_DELIMITER/cur1/CODE_DELIMITER/=/CODE_DELIMITER/headA/CODE_DELIMITER/,/CODE_DELIMITER/*/CODE_DELIMITER/cur2/CODE_DELIMITER/=/CODE_DELIMITER/headB/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/cur1/CODE_DELIMITER/==/CODE_DELIMITER/NULL/CODE_DELIMITER/||/CODE_DELIMITER/cur2/CODE_DELIMITER/==/CODE_DELIMITER/NULL/CODE_DELIMITER/)/CODE_DELIMITER/return/CODE_DELIMITER/NULL/CODE_DELIMITER/;/CODE_DELIMITER/while/CODE_DELIMITER/(/CODE_DELIMITER/cur1/CODE_DELIMITER/&&/CODE_DELIMITER/cur2/CODE_DELIMITER/&&/CODE_DELIMITER/cur1/CODE_DELIMITER/!=/CODE_DELIMITER/cur2/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/cur1/CODE_DELIMITER/=/CODE_DELIMITER/cur1/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/;/CODE_DELIMITER/cur2/CODE_DELIMITER/=/CODE_DELIMITER/cur2/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/cur1/CODE_DELIMITER/==/CODE_DELIMITER/cur2/CODE_DELIMITER/)/CODE_DELIMITER/return/CODE_DELIMITER/cur1/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/!/CODE_DELIMITER/cur1/CODE_DELIMITER/)/CODE_DELIMITER/cur1/CODE_DELIMITER/=/CODE_DELIMITER/headB/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/!/CODE_DELIMITER/cur2/CODE_DELIMITER/)/CODE_DELIMITER/cur2/CODE_DELIMITER/=/CODE_DELIMITER/headA/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/cur1/CODE_DELIMITER/;/CODE_DELIMITER/}
bool/CODE_DELIMITER/isPerfectSquare/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/num/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/long/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/*/CODE_DELIMITER/i/CODE_DELIMITER/<=/CODE_DELIMITER/num/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/i/CODE_DELIMITER/*/CODE_DELIMITER/i/CODE_DELIMITER/==/CODE_DELIMITER/num/CODE_DELIMITER/)/CODE_DELIMITER/return/CODE_DELIMITER/true/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/false/CODE_DELIMITER/;/CODE_DELIMITER/}
const/CODE_DELIMITER/charLength/CODE_DELIMITER/=/CODE_DELIMITER/26/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/charsCount/CODE_DELIMITER/(/CODE_DELIMITER/char/CODE_DELIMITER/*/CODE_DELIMITER/word/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/result/CODE_DELIMITER/=/CODE_DELIMITER/calloc/CODE_DELIMITER/(/CODE_DELIMITER/charLength/CODE_DELIMITER/,/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/wordLen/CODE_DELIMITER/=/CODE_DELIMITER/strlen/CODE_DELIMITER/(/CODE_DELIMITER/word/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/wordLen/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/result/CODE_DELIMITER/[/CODE_DELIMITER/word/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/-/CODE_DELIMITER/'a'/CODE_DELIMITER/]/CODE_DELIMITER/++/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/result/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/int/CODE_DELIMITER/diff/CODE_DELIMITER/(/CODE_DELIMITER/const/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/i/CODE_DELIMITER/,/CODE_DELIMITER/const/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/j/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/*/CODE_DELIMITER/i/CODE_DELIMITER/-/CODE_DELIMITER/*/CODE_DELIMITER/j/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/// Counting/CODE_DELIMITER/// Runtime: O(n)/CODE_DELIMITER/// Space: O(1)/CODE_DELIMITER/bool/CODE_DELIMITER/closeStrings/CODE_DELIMITER/(/CODE_DELIMITER/char/CODE_DELIMITER/*/CODE_DELIMITER/word1/CODE_DELIMITER/,/CODE_DELIMITER/char/CODE_DELIMITER/*/CODE_DELIMITER/word2/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/word1CharsCounter/CODE_DELIMITER/=/CODE_DELIMITER/charsCount/CODE_DELIMITER/(/CODE_DELIMITER/word1/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/word2CharsCounter/CODE_DELIMITER/=/CODE_DELIMITER/charsCount/CODE_DELIMITER/(/CODE_DELIMITER/word2/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/// The lengths of both string should be equal/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/strlen/CODE_DELIMITER/(/CODE_DELIMITER/word1/CODE_DELIMITER/)/CODE_DELIMITER/!=/CODE_DELIMITER/strlen/CODE_DELIMITER/(/CODE_DELIMITER/word2/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/false/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/// The char should appear in both strings/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/charLength/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/(/CODE_DELIMITER/word1CharsCounter/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/!=/CODE_DELIMITER/0/CODE_DELIMITER/&&/CODE_DELIMITER/word2CharsCounter/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/==/CODE_DELIMITER/0/CODE_DELIMITER/)/CODE_DELIMITER/||/CODE_DELIMITER/(/CODE_DELIMITER/word1CharsCounter/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/==/CODE_DELIMITER/0/CODE_DELIMITER/&&/CODE_DELIMITER/word2CharsCounter/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/!=/CODE_DELIMITER/0/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/false/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/}/CODE_DELIMITER/qsort/CODE_DELIMITER/(/CODE_DELIMITER/word1CharsCounter/CODE_DELIMITER/,/CODE_DELIMITER/charLength/CODE_DELIMITER/,/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/)/CODE_DELIMITER/,/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/(/CODE_DELIMITER/*/CODE_DELIMITER/)/CODE_DELIMITER/(/CODE_DELIMITER/const/CODE_DELIMITER/void/CODE_DELIMITER/*/CODE_DELIMITER/,/CODE_DELIMITER/const/CODE_DELIMITER/void/CODE_DELIMITER/*/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/diff/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/qsort/CODE_DELIMITER/(/CODE_DELIMITER/word2CharsCounter/CODE_DELIMITER/,/CODE_DELIMITER/charLength/CODE_DELIMITER/,/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/)/CODE_DELIMITER/,/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/(/CODE_DELIMITER/*/CODE_DELIMITER/)/CODE_DELIMITER/(/CODE_DELIMITER/const/CODE_DELIMITER/void/CODE_DELIMITER/*/CODE_DELIMITER/,/CODE_DELIMITER/const/CODE_DELIMITER/void/CODE_DELIMITER/*/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/diff/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/// appearing of chars should be the same in both strings./CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/charLength/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/word1CharsCounter/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/!=/CODE_DELIMITER/word2CharsCounter/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/false/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/}/CODE_DELIMITER/free/CODE_DELIMITER/(/CODE_DELIMITER/word1CharsCounter/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/free/CODE_DELIMITER/(/CODE_DELIMITER/word2CharsCounter/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/true/CODE_DELIMITER/;/CODE_DELIMITER/}
/* Boyer-Moore Majority Vote Algorithm
 * http://www.cs.utexas.edu/~moore/best-ideas/mjrty/ *//CODE_DELIMITER/int/CODE_DELIMITER/majorityElement/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/nums/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/numsSize/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/count/CODE_DELIMITER/=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/majorNum/CODE_DELIMITER/=/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/0/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/numsSize/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/count/CODE_DELIMITER/==/CODE_DELIMITER/0/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/majorNum/CODE_DELIMITER/=/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/count/CODE_DELIMITER/++/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/else/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/majorNum/CODE_DELIMITER/==/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/count/CODE_DELIMITER/++/CODE_DELIMITER/;/CODE_DELIMITER/else/CODE_DELIMITER/count/CODE_DELIMITER/--/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/majorNum/CODE_DELIMITER/;/CODE_DELIMITER/}
char/CODE_DELIMITER/findTheDifference/CODE_DELIMITER/(/CODE_DELIMITER/char/CODE_DELIMITER/*/CODE_DELIMITER/s/CODE_DELIMITER/,/CODE_DELIMITER/char/CODE_DELIMITER/*/CODE_DELIMITER/t/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/sum1/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/,/CODE_DELIMITER/sum2/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/strlen/CODE_DELIMITER/(/CODE_DELIMITER/s/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/sum1/CODE_DELIMITER/+=/CODE_DELIMITER/s/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/strlen/CODE_DELIMITER/(/CODE_DELIMITER/t/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/sum2/CODE_DELIMITER/+=/CODE_DELIMITER/t/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/(/CODE_DELIMITER/char/CODE_DELIMITER/)/CODE_DELIMITER/(/CODE_DELIMITER/sum2/CODE_DELIMITER/-/CODE_DELIMITER/sum1/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}
// Bit manipulation./CODE_DELIMITER/// - Find the bit length of n using log2/CODE_DELIMITER/// - Create bit mask of bit length of n/CODE_DELIMITER/// - Retun ~n and bit of ones mask/CODE_DELIMITER/// Runtime: O(log2(n))/CODE_DELIMITER/// Space: O(1)/CODE_DELIMITER/int/CODE_DELIMITER/bitwiseComplement/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/n/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/n/CODE_DELIMITER/==/CODE_DELIMITER/0/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/int/CODE_DELIMITER/binary_number_length/CODE_DELIMITER/=/CODE_DELIMITER/ceil/CODE_DELIMITER/(/CODE_DELIMITER/log2/CODE_DELIMITER/(/CODE_DELIMITER/n/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/(/CODE_DELIMITER/~/CODE_DELIMITER/n/CODE_DELIMITER/)/CODE_DELIMITER/&/CODE_DELIMITER/(/CODE_DELIMITER/(/CODE_DELIMITER/1/CODE_DELIMITER/<</CODE_DELIMITER/binary_number_length/CODE_DELIMITER/)/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}
bool/CODE_DELIMITER/isleaf/CODE_DELIMITER/(/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/root/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/left/CODE_DELIMITER/==/CODE_DELIMITER/NULL/CODE_DELIMITER/&&/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/right/CODE_DELIMITER/==/CODE_DELIMITER/NULL/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/int/CODE_DELIMITER/sumOfLeftLeaves/CODE_DELIMITER/(/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/root/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/==/CODE_DELIMITER/NULL/CODE_DELIMITER/)/CODE_DELIMITER/return/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/left/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/isleaf/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/left/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/return/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/left/CODE_DELIMITER/->/CODE_DELIMITER/val/CODE_DELIMITER/+/CODE_DELIMITER/sumOfLeftLeaves/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/right/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/sumOfLeftLeaves/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/left/CODE_DELIMITER/)/CODE_DELIMITER/+/CODE_DELIMITER/sumOfLeftLeaves/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/right/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}
int/CODE_DELIMITER/cmpval/CODE_DELIMITER/(/CODE_DELIMITER/const/CODE_DELIMITER/void/CODE_DELIMITER/*/CODE_DELIMITER/a/CODE_DELIMITER/,/CODE_DELIMITER/const/CODE_DELIMITER/void/CODE_DELIMITER/*/CODE_DELIMITER/b/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/*/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/)/CODE_DELIMITER/a/CODE_DELIMITER/-/CODE_DELIMITER/*/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/)/CODE_DELIMITER/b/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/findDuplicates/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/nums/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/numsSize/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/returnSize/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/;/CODE_DELIMITER/qsort/CODE_DELIMITER/(/CODE_DELIMITER/nums/CODE_DELIMITER/,/CODE_DELIMITER/numsSize/CODE_DELIMITER/,/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/)/CODE_DELIMITER/,/CODE_DELIMITER/cmpval/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/retArr/CODE_DELIMITER/=/CODE_DELIMITER/malloc/CODE_DELIMITER/(/CODE_DELIMITER/numsSize/CODE_DELIMITER/*/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/*/CODE_DELIMITER/returnSize/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/numsSize/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/==/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/+/CODE_DELIMITER/1/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/retArr/CODE_DELIMITER/[/CODE_DELIMITER/*/CODE_DELIMITER/returnSize/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/*/CODE_DELIMITER/returnSize/CODE_DELIMITER/=/CODE_DELIMITER/*/CODE_DELIMITER/returnSize/CODE_DELIMITER/+/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/i/CODE_DELIMITER/+/CODE_DELIMITER/2/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/else/CODE_DELIMITER/{/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/i/CODE_DELIMITER/+/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/retArr/CODE_DELIMITER/;/CODE_DELIMITER/}
int/CODE_DELIMITER/compare/CODE_DELIMITER/(/CODE_DELIMITER/const/CODE_DELIMITER/void/CODE_DELIMITER/*/CODE_DELIMITER/i/CODE_DELIMITER/,/CODE_DELIMITER/const/CODE_DELIMITER/void/CODE_DELIMITER/*/CODE_DELIMITER/j/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/*/CODE_DELIMITER/(/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/)/CODE_DELIMITER/i/CODE_DELIMITER/)/CODE_DELIMITER/-/CODE_DELIMITER/*/CODE_DELIMITER/(/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/)/CODE_DELIMITER/j/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/// Greedy + sorting/CODE_DELIMITER/// Runtime: O(n*log(n))/CODE_DELIMITER/// Space: O(1)/CODE_DELIMITER/int/CODE_DELIMITER/maxIceCream/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/costs/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/costsSize/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/coins/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/qsort/CODE_DELIMITER/(/CODE_DELIMITER/costs/CODE_DELIMITER/,/CODE_DELIMITER/costsSize/CODE_DELIMITER/,/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/)/CODE_DELIMITER/,/CODE_DELIMITER/compare/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/result/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/leftCoins/CODE_DELIMITER/=/CODE_DELIMITER/coins/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/costsSize/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/costs/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/>/CODE_DELIMITER/leftCoins/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/break/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/leftCoins/CODE_DELIMITER/-=/CODE_DELIMITER/costs/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/result/CODE_DELIMITER/++/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/result/CODE_DELIMITER/;/CODE_DELIMITER/}
int/CODE_DELIMITER/hammingDistance/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/x/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/y/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/difference/CODE_DELIMITER/=/CODE_DELIMITER/x/CODE_DELIMITER/^/CODE_DELIMITER/y/CODE_DELIMITER/;/CODE_DELIMITER/// The XOR operator generates the bitwise difference in the/CODE_DELIMITER/// binary representation of two numbers If bit in ith position/CODE_DELIMITER/// of both numbers is same, bit in difference is 0, otherwise 1/CODE_DELIMITER/int/CODE_DELIMITER/TotalBits/CODE_DELIMITER/=/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/difference/CODE_DELIMITER/)/CODE_DELIMITER/*/CODE_DELIMITER/8/CODE_DELIMITER/;/CODE_DELIMITER/// total number of bits/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/,/CODE_DELIMITER/distance/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/TotalBits/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/difference/CODE_DELIMITER/&/CODE_DELIMITER/(/CODE_DELIMITER/UINT32_C/CODE_DELIMITER/(/CODE_DELIMITER/1/CODE_DELIMITER/)/CODE_DELIMITER/<</CODE_DELIMITER/i/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/// if the bit on the ith position of 32 bit input is 1,/CODE_DELIMITER/// then proceed Further note the use of UINT32_C to convert/CODE_DELIMITER/// 1 to unsigned 32 bit int, as just 1 is treated as int/CODE_DELIMITER/// which cannot be shifted left more than 30 times/CODE_DELIMITER/distance/CODE_DELIMITER/+=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/distance/CODE_DELIMITER/;/CODE_DELIMITER/}
int/CODE_DELIMITER/findComplement/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/num/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/TotalBits/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/temp/CODE_DELIMITER/=/CODE_DELIMITER/num/CODE_DELIMITER/;/CODE_DELIMITER/while/CODE_DELIMITER/(/CODE_DELIMITER/temp/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/// To find position of MSB in given num. Since num is represented as a/CODE_DELIMITER/// standard size in memory, we cannot rely on size for that information./CODE_DELIMITER/TotalBits/CODE_DELIMITER/++/CODE_DELIMITER/;/CODE_DELIMITER/// increment TotalBits till temp becomes 0/CODE_DELIMITER/temp/CODE_DELIMITER/>>=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/// shift temp right by 1 bit every iteration; temp loses 1/CODE_DELIMITER/// bit to underflow every iteration till it becomes 0/CODE_DELIMITER/}/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/,/CODE_DELIMITER/flipNumber/CODE_DELIMITER/=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/// Eg: 1's complement of 101(binary) can be found as/CODE_DELIMITER/// 101^111 (XOR with 111 flips all bits that are 1 to 0/CODE_DELIMITER/// and flips 0 to 1)/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/TotalBits/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/flipNumber/CODE_DELIMITER/+=/CODE_DELIMITER/UINT32_C/CODE_DELIMITER/(/CODE_DELIMITER/1/CODE_DELIMITER/)/CODE_DELIMITER/<</CODE_DELIMITER/i/CODE_DELIMITER/;/CODE_DELIMITER/// Note the use of unsigned int to facilitate left/CODE_DELIMITER/// shift more than 31 times, if needed/CODE_DELIMITER/}/CODE_DELIMITER/num/CODE_DELIMITER/=/CODE_DELIMITER/num/CODE_DELIMITER/^/CODE_DELIMITER/flipNumber/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/num/CODE_DELIMITER/;/CODE_DELIMITER/}
int/CODE_DELIMITER/max/CODE_DELIMITER/(/CODE_DELIMITER/a/CODE_DELIMITER/,/CODE_DELIMITER/b/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/a/CODE_DELIMITER/>/CODE_DELIMITER/b/CODE_DELIMITER/)/CODE_DELIMITER/return/CODE_DELIMITER/a/CODE_DELIMITER/;/CODE_DELIMITER/else/CODE_DELIMITER/return/CODE_DELIMITER/b/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/int/CODE_DELIMITER/findMaxConsecutiveOnes/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/nums/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/numsSize/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/count/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/result/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/numsSize/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/==/CODE_DELIMITER/0/CODE_DELIMITER/)/CODE_DELIMITER/count/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/else/CODE_DELIMITER/{/CODE_DELIMITER/count/CODE_DELIMITER/++/CODE_DELIMITER/;/CODE_DELIMITER/result/CODE_DELIMITER/=/CODE_DELIMITER/max/CODE_DELIMITER/(/CODE_DELIMITER/result/CODE_DELIMITER/,/CODE_DELIMITER/count/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/result/CODE_DELIMITER/;/CODE_DELIMITER/}
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 *//CODE_DELIMITER/bool/CODE_DELIMITER/checkSymmetric/CODE_DELIMITER/(/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/left/CODE_DELIMITER/,/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/right/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/!/CODE_DELIMITER/left/CODE_DELIMITER/||/CODE_DELIMITER/!/CODE_DELIMITER/right/CODE_DELIMITER/)/CODE_DELIMITER/return/CODE_DELIMITER/left/CODE_DELIMITER/==/CODE_DELIMITER/right/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/left/CODE_DELIMITER/->/CODE_DELIMITER/val/CODE_DELIMITER/!=/CODE_DELIMITER/right/CODE_DELIMITER/->/CODE_DELIMITER/val/CODE_DELIMITER/)/CODE_DELIMITER/return/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/checkSymmetric/CODE_DELIMITER/(/CODE_DELIMITER/left/CODE_DELIMITER/->/CODE_DELIMITER/left/CODE_DELIMITER/,/CODE_DELIMITER/right/CODE_DELIMITER/->/CODE_DELIMITER/right/CODE_DELIMITER/)/CODE_DELIMITER/&&/CODE_DELIMITER/checkSymmetric/CODE_DELIMITER/(/CODE_DELIMITER/left/CODE_DELIMITER/->/CODE_DELIMITER/right/CODE_DELIMITER/,/CODE_DELIMITER/right/CODE_DELIMITER/->/CODE_DELIMITER/left/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/bool/CODE_DELIMITER/isSymmetric/CODE_DELIMITER/(/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/root/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/root/CODE_DELIMITER/==/CODE_DELIMITER/NULL/CODE_DELIMITER/||/CODE_DELIMITER/checkSymmetric/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/left/CODE_DELIMITER/,/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/right/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}
int/CODE_DELIMITER/hammingWeight/CODE_DELIMITER/(/CODE_DELIMITER/uint32_t/CODE_DELIMITER/n/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/TotalBits/CODE_DELIMITER/=/CODE_DELIMITER/32/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/,/CODE_DELIMITER/weight/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/TotalBits/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/n/CODE_DELIMITER/&/CODE_DELIMITER/(/CODE_DELIMITER/UINT32_C/CODE_DELIMITER/(/CODE_DELIMITER/1/CODE_DELIMITER/)/CODE_DELIMITER/<</CODE_DELIMITER/i/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/// if the bit on the ith position of 32 bit input is 1,/CODE_DELIMITER/// then proceed Further note the use of UINT32_C to/CODE_DELIMITER/// convert 1 to unsigned 32 bit int, as just 1 is treated/CODE_DELIMITER/// as int which cannot be shifted left more than 30 times/CODE_DELIMITER/weight/CODE_DELIMITER/+=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/weight/CODE_DELIMITER/;/CODE_DELIMITER/}
int/CODE_DELIMITER/fib/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/N/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/N/CODE_DELIMITER/==/CODE_DELIMITER/0/CODE_DELIMITER/)/CODE_DELIMITER/return/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/N/CODE_DELIMITER/==/CODE_DELIMITER/1/CODE_DELIMITER/)/CODE_DELIMITER/return/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/fib/CODE_DELIMITER/(/CODE_DELIMITER/N/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/)/CODE_DELIMITER/+/CODE_DELIMITER/fib/CODE_DELIMITER/(/CODE_DELIMITER/N/CODE_DELIMITER/-/CODE_DELIMITER/2/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}
bool/CODE_DELIMITER/detectCapitalUse/CODE_DELIMITER/(/CODE_DELIMITER/char/CODE_DELIMITER/*/CODE_DELIMITER/word/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/len/CODE_DELIMITER/=/CODE_DELIMITER/strlen/CODE_DELIMITER/(/CODE_DELIMITER/word/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/len/CODE_DELIMITER/==/CODE_DELIMITER/1/CODE_DELIMITER/)/CODE_DELIMITER/return/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/countUpper/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/,/CODE_DELIMITER/i/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/len/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/isupper/CODE_DELIMITER/(/CODE_DELIMITER/word/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/countUpper/CODE_DELIMITER/++/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER//* All lower case *//CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/countUpper/CODE_DELIMITER/==/CODE_DELIMITER/0/CODE_DELIMITER/)/CODE_DELIMITER/return/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER//* 1st character is upper, and the rest is lower case *//CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/countUpper/CODE_DELIMITER/==/CODE_DELIMITER/1/CODE_DELIMITER/&&/CODE_DELIMITER/isupper/CODE_DELIMITER/(/CODE_DELIMITER/word/CODE_DELIMITER/[/CODE_DELIMITER/0/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/return/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER//* Check all character is upper case? *//CODE_DELIMITER/else/CODE_DELIMITER/return/CODE_DELIMITER/countUpper/CODE_DELIMITER/==/CODE_DELIMITER/len/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER//* Another way *//CODE_DELIMITER/bool/CODE_DELIMITER/isAllUpper/CODE_DELIMITER/(/CODE_DELIMITER/char/CODE_DELIMITER/*/CODE_DELIMITER/word/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/len/CODE_DELIMITER/=/CODE_DELIMITER/strlen/CODE_DELIMITER/(/CODE_DELIMITER/word/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/len/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/islower/CODE_DELIMITER/(/CODE_DELIMITER/word/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/return/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/bool/CODE_DELIMITER/detectCapitalUse/CODE_DELIMITER/(/CODE_DELIMITER/char/CODE_DELIMITER/*/CODE_DELIMITER/word/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/len/CODE_DELIMITER/=/CODE_DELIMITER/strlen/CODE_DELIMITER/(/CODE_DELIMITER/word/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/len/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/isupper/CODE_DELIMITER/(/CODE_DELIMITER/word/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/&&/CODE_DELIMITER/!/CODE_DELIMITER/isAllUpper/CODE_DELIMITER/(/CODE_DELIMITER/word/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/return/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/}
int/CODE_DELIMITER/rangeBitwiseAnd/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/m/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/n/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/while/CODE_DELIMITER/(/CODE_DELIMITER/m/CODE_DELIMITER/</CODE_DELIMITER/n/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/n/CODE_DELIMITER/&=/CODE_DELIMITER/n/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/n/CODE_DELIMITER/;/CODE_DELIMITER/}
/**
 * Time complexity: O(log n).
 * Space complexity: O(1).
 * @details The array has a pattern that consists in of the existing sub-array to 
 *          the left of the non-repeating number will satisfy the condition that 
 *          each pair of repeated elements have their first occurrence at the even index
 *          and their second occurrence at the odd index, and that the sub-array to 
 *          the right of the non-repeating number will satisfy the condition that 
 *          each pair of repeated elements have their first occurrence at the odd index
 *          and their second occurrence at the even index. With this pattern in mind, 
 *          we can solve the problem using binary search.
 *//CODE_DELIMITER/int/CODE_DELIMITER/singleNonDuplicate/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/nums/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/numsSize/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/left/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/,/CODE_DELIMITER/right/CODE_DELIMITER/=/CODE_DELIMITER/numsSize/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/while/CODE_DELIMITER/(/CODE_DELIMITER/left/CODE_DELIMITER/</CODE_DELIMITER/right/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/mid/CODE_DELIMITER/=/CODE_DELIMITER/(/CODE_DELIMITER/right/CODE_DELIMITER/+/CODE_DELIMITER/left/CODE_DELIMITER/)/CODE_DELIMITER///CODE_DELIMITER/2/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/mid/CODE_DELIMITER/%/CODE_DELIMITER/2/CODE_DELIMITER/==/CODE_DELIMITER/0/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/mid/CODE_DELIMITER/]/CODE_DELIMITER/==/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/mid/CODE_DELIMITER/+/CODE_DELIMITER/1/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/left/CODE_DELIMITER/=/CODE_DELIMITER/mid/CODE_DELIMITER/+/CODE_DELIMITER/2/CODE_DELIMITER/;/CODE_DELIMITER/else/CODE_DELIMITER/right/CODE_DELIMITER/=/CODE_DELIMITER/mid/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/else/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/mid/CODE_DELIMITER/]/CODE_DELIMITER/==/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/mid/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/left/CODE_DELIMITER/=/CODE_DELIMITER/mid/CODE_DELIMITER/+/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/else/CODE_DELIMITER/right/CODE_DELIMITER/=/CODE_DELIMITER/mid/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/left/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/}
int/CODE_DELIMITER/cmpval/CODE_DELIMITER/(/CODE_DELIMITER/const/CODE_DELIMITER/void/CODE_DELIMITER/*/CODE_DELIMITER/a/CODE_DELIMITER/,/CODE_DELIMITER/const/CODE_DELIMITER/void/CODE_DELIMITER/*/CODE_DELIMITER/b/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/*/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/)/CODE_DELIMITER/a/CODE_DELIMITER/-/CODE_DELIMITER/*/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/)/CODE_DELIMITER/b/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/int/CODE_DELIMITER/arrayPairSum/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/nums/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/numsSize/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/sum/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/,/CODE_DELIMITER/i/CODE_DELIMITER/;/CODE_DELIMITER/qsort/CODE_DELIMITER/(/CODE_DELIMITER/nums/CODE_DELIMITER/,/CODE_DELIMITER/numsSize/CODE_DELIMITER/,/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/)/CODE_DELIMITER/,/CODE_DELIMITER/cmpval/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/numsSize/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/i/CODE_DELIMITER/+/CODE_DELIMITER/2/CODE_DELIMITER/)/CODE_DELIMITER/sum/CODE_DELIMITER/=/CODE_DELIMITER/sum/CODE_DELIMITER/+/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/sum/CODE_DELIMITER/;/CODE_DELIMITER/}
const/CODE_DELIMITER/int/CODE_DELIMITER/EnglishLettersNumber/CODE_DELIMITER/=/CODE_DELIMITER/26/CODE_DELIMITER/;/CODE_DELIMITER/void/CODE_DELIMITER/countCharsForStringSlice/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/charsCounter/CODE_DELIMITER/,/CODE_DELIMITER/char/CODE_DELIMITER/*/CODE_DELIMITER/s/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/length/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/sign/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/length/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/charsCounter/CODE_DELIMITER/[/CODE_DELIMITER/s/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/-/CODE_DELIMITER/'a'/CODE_DELIMITER/]/CODE_DELIMITER/+=/CODE_DELIMITER/sign/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/}/CODE_DELIMITER/// Sliding window/CODE_DELIMITER/// Calculate number of chars in the current slide. /CODE_DELIMITER/// Runtime: O(n)/CODE_DELIMITER/// Space: O(1) - only number of english lowercase letters./CODE_DELIMITER/bool/CODE_DELIMITER/checkInclusion/CODE_DELIMITER/(/CODE_DELIMITER/char/CODE_DELIMITER/*/CODE_DELIMITER/s1/CODE_DELIMITER/,/CODE_DELIMITER/char/CODE_DELIMITER/*/CODE_DELIMITER/s2/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/lengthS1/CODE_DELIMITER/=/CODE_DELIMITER/strlen/CODE_DELIMITER/(/CODE_DELIMITER/s1/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/lengthS2/CODE_DELIMITER/=/CODE_DELIMITER/strlen/CODE_DELIMITER/(/CODE_DELIMITER/s2/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/lengthS1/CODE_DELIMITER/>/CODE_DELIMITER/lengthS2/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/false/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/charsCounter/CODE_DELIMITER/=/CODE_DELIMITER/calloc/CODE_DELIMITER/(/CODE_DELIMITER/EnglishLettersNumber/CODE_DELIMITER/,/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/// We keep counters of s1 with '-' sign. It has to be offset by s2 chars/CODE_DELIMITER/countCharsForStringSlice/CODE_DELIMITER/(/CODE_DELIMITER/charsCounter/CODE_DELIMITER/,/CODE_DELIMITER/s1/CODE_DELIMITER/,/CODE_DELIMITER/lengthS1/CODE_DELIMITER/,/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/countCharsForStringSlice/CODE_DELIMITER/(/CODE_DELIMITER/charsCounter/CODE_DELIMITER/,/CODE_DELIMITER/s2/CODE_DELIMITER/,/CODE_DELIMITER/lengthS1/CODE_DELIMITER/,/CODE_DELIMITER/1/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/diffChars/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/EnglishLettersNumber/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/charsCounter/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/!=/CODE_DELIMITER/0/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/diffChars/CODE_DELIMITER/++/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/}/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/diffChars/CODE_DELIMITER/==/CODE_DELIMITER/0/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/true/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/lengthS2/CODE_DELIMITER/-/CODE_DELIMITER/lengthS1/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/charNumberLeft/CODE_DELIMITER/=/CODE_DELIMITER/s2/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/-/CODE_DELIMITER/'a'/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/charNumberRight/CODE_DELIMITER/=/CODE_DELIMITER/s2/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/+/CODE_DELIMITER/lengthS1/CODE_DELIMITER/]/CODE_DELIMITER/-/CODE_DELIMITER/'a'/CODE_DELIMITER/;/CODE_DELIMITER/charsCounter/CODE_DELIMITER/[/CODE_DELIMITER/charNumberLeft/CODE_DELIMITER/]/CODE_DELIMITER/-=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/charsCounter/CODE_DELIMITER/[/CODE_DELIMITER/charNumberLeft/CODE_DELIMITER/]/CODE_DELIMITER/==/CODE_DELIMITER/0/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/diffChars/CODE_DELIMITER/-=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/else/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/charsCounter/CODE_DELIMITER/[/CODE_DELIMITER/charNumberLeft/CODE_DELIMITER/]/CODE_DELIMITER/==/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/diffChars/CODE_DELIMITER/+=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/charsCounter/CODE_DELIMITER/[/CODE_DELIMITER/charNumberRight/CODE_DELIMITER/]/CODE_DELIMITER/+=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/charsCounter/CODE_DELIMITER/[/CODE_DELIMITER/charNumberRight/CODE_DELIMITER/]/CODE_DELIMITER/==/CODE_DELIMITER/0/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/diffChars/CODE_DELIMITER/-=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/else/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/charsCounter/CODE_DELIMITER/[/CODE_DELIMITER/charNumberRight/CODE_DELIMITER/]/CODE_DELIMITER/==/CODE_DELIMITER/1/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/diffChars/CODE_DELIMITER/+=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/diffChars/CODE_DELIMITER/==/CODE_DELIMITER/0/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/true/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/}/CODE_DELIMITER/free/CODE_DELIMITER/(/CODE_DELIMITER/charsCounter/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/false/CODE_DELIMITER/;/CODE_DELIMITER/}
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 *//CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/nextLargerNodes/CODE_DELIMITER/(/CODE_DELIMITER/struct/CODE_DELIMITER/ListNode/CODE_DELIMITER/*/CODE_DELIMITER/head/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/returnSize/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/output/CODE_DELIMITER/,/CODE_DELIMITER/count/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/struct/CODE_DELIMITER/ListNode/CODE_DELIMITER/*/CODE_DELIMITER/tmp/CODE_DELIMITER/=/CODE_DELIMITER/head/CODE_DELIMITER/,/CODE_DELIMITER/*/CODE_DELIMITER/tmp2/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/;/CODE_DELIMITER/tmp/CODE_DELIMITER/!=/CODE_DELIMITER/NULL/CODE_DELIMITER/;/CODE_DELIMITER/tmp/CODE_DELIMITER/=/CODE_DELIMITER/tmp/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/,/CODE_DELIMITER/count/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/output/CODE_DELIMITER/=/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/)/CODE_DELIMITER/calloc/CODE_DELIMITER/(/CODE_DELIMITER/count/CODE_DELIMITER/,/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/*/CODE_DELIMITER/returnSize/CODE_DELIMITER/=/CODE_DELIMITER/count/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/tmp/CODE_DELIMITER/=/CODE_DELIMITER/head/CODE_DELIMITER/,/CODE_DELIMITER/count/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/tmp/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/!=/CODE_DELIMITER/NULL/CODE_DELIMITER/;/CODE_DELIMITER/tmp/CODE_DELIMITER/=/CODE_DELIMITER/tmp/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/,/CODE_DELIMITER/count/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/tmp2/CODE_DELIMITER/=/CODE_DELIMITER/tmp/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/;/CODE_DELIMITER/tmp2/CODE_DELIMITER/!=/CODE_DELIMITER/NULL/CODE_DELIMITER/;/CODE_DELIMITER/tmp2/CODE_DELIMITER/=/CODE_DELIMITER/tmp2/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/tmp2/CODE_DELIMITER/->/CODE_DELIMITER/val/CODE_DELIMITER/>/CODE_DELIMITER/tmp/CODE_DELIMITER/->/CODE_DELIMITER/val/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/output/CODE_DELIMITER/[/CODE_DELIMITER/count/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/tmp2/CODE_DELIMITER/->/CODE_DELIMITER/val/CODE_DELIMITER/;/CODE_DELIMITER/break/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/}/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/output/CODE_DELIMITER/;/CODE_DELIMITER/}
struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/newNode/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/item/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/node/CODE_DELIMITER/=/CODE_DELIMITER/(/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/)/CODE_DELIMITER/malloc/CODE_DELIMITER/(/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/node/CODE_DELIMITER/->/CODE_DELIMITER/val/CODE_DELIMITER/=/CODE_DELIMITER/item/CODE_DELIMITER/;/CODE_DELIMITER/node/CODE_DELIMITER/->/CODE_DELIMITER/left/CODE_DELIMITER/=/CODE_DELIMITER/node/CODE_DELIMITER/->/CODE_DELIMITER/right/CODE_DELIMITER/=/CODE_DELIMITER/NULL/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/node/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/mergeTrees/CODE_DELIMITER/(/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/t1/CODE_DELIMITER/,/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/t2/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/t1/CODE_DELIMITER/==/CODE_DELIMITER/NULL/CODE_DELIMITER/&&/CODE_DELIMITER/t2/CODE_DELIMITER/==/CODE_DELIMITER/NULL/CODE_DELIMITER/)/CODE_DELIMITER/return/CODE_DELIMITER/NULL/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/item/CODE_DELIMITER/=/CODE_DELIMITER/(/CODE_DELIMITER/t1/CODE_DELIMITER/==/CODE_DELIMITER/NULL/CODE_DELIMITER/?/CODE_DELIMITER/0/CODE_DELIMITER/:/CODE_DELIMITER/t1/CODE_DELIMITER/->/CODE_DELIMITER/val/CODE_DELIMITER/)/CODE_DELIMITER/+/CODE_DELIMITER/(/CODE_DELIMITER/t2/CODE_DELIMITER/==/CODE_DELIMITER/NULL/CODE_DELIMITER/?/CODE_DELIMITER/0/CODE_DELIMITER/:/CODE_DELIMITER/t2/CODE_DELIMITER/->/CODE_DELIMITER/val/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/node/CODE_DELIMITER/=/CODE_DELIMITER/newNode/CODE_DELIMITER/(/CODE_DELIMITER/item/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/node/CODE_DELIMITER/->/CODE_DELIMITER/left/CODE_DELIMITER/=/CODE_DELIMITER/mergeTrees/CODE_DELIMITER/(/CODE_DELIMITER/t1/CODE_DELIMITER/==/CODE_DELIMITER/NULL/CODE_DELIMITER/?/CODE_DELIMITER/NULL/CODE_DELIMITER/:/CODE_DELIMITER/t1/CODE_DELIMITER/->/CODE_DELIMITER/left/CODE_DELIMITER/,/CODE_DELIMITER/t2/CODE_DELIMITER/==/CODE_DELIMITER/NULL/CODE_DELIMITER/?/CODE_DELIMITER/NULL/CODE_DELIMITER/:/CODE_DELIMITER/t2/CODE_DELIMITER/->/CODE_DELIMITER/left/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/node/CODE_DELIMITER/->/CODE_DELIMITER/right/CODE_DELIMITER/=/CODE_DELIMITER/mergeTrees/CODE_DELIMITER/(/CODE_DELIMITER/t1/CODE_DELIMITER/==/CODE_DELIMITER/NULL/CODE_DELIMITER/?/CODE_DELIMITER/NULL/CODE_DELIMITER/:/CODE_DELIMITER/t1/CODE_DELIMITER/->/CODE_DELIMITER/right/CODE_DELIMITER/,/CODE_DELIMITER/t2/CODE_DELIMITER/==/CODE_DELIMITER/NULL/CODE_DELIMITER/?/CODE_DELIMITER/NULL/CODE_DELIMITER/:/CODE_DELIMITER/t2/CODE_DELIMITER/->/CODE_DELIMITER/right/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/node/CODE_DELIMITER/;/CODE_DELIMITER/}
int/CODE_DELIMITER/numcmp/CODE_DELIMITER/(/CODE_DELIMITER/const/CODE_DELIMITER/void/CODE_DELIMITER/*/CODE_DELIMITER/a/CODE_DELIMITER/,/CODE_DELIMITER/const/CODE_DELIMITER/void/CODE_DELIMITER/*/CODE_DELIMITER/b/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/*/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/)/CODE_DELIMITER/a/CODE_DELIMITER/-/CODE_DELIMITER/*/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/)/CODE_DELIMITER/b/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/bool/CODE_DELIMITER/containsDuplicate/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/nums/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/numsSize/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/;/CODE_DELIMITER/qsort/CODE_DELIMITER/(/CODE_DELIMITER/nums/CODE_DELIMITER/,/CODE_DELIMITER/numsSize/CODE_DELIMITER/,/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/)/CODE_DELIMITER/,/CODE_DELIMITER/numcmp/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/numsSize/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/==/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/+/CODE_DELIMITER/1/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/return/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/}
long/CODE_DELIMITER/numberOfWaysForChar/CODE_DELIMITER/(/CODE_DELIMITER/char/CODE_DELIMITER/*/CODE_DELIMITER/s/CODE_DELIMITER/,/CODE_DELIMITER/char/CODE_DELIMITER/c/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/long/CODE_DELIMITER/firstBuildingAppearNumber/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/long/CODE_DELIMITER/secondBuildingAppearNumber/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/long/CODE_DELIMITER/result/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/sLength/CODE_DELIMITER/=/CODE_DELIMITER/strlen/CODE_DELIMITER/(/CODE_DELIMITER/s/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/sLength/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/s/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/==/CODE_DELIMITER/c/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/result/CODE_DELIMITER/+=/CODE_DELIMITER/secondBuildingAppearNumber/CODE_DELIMITER/;/CODE_DELIMITER/firstBuildingAppearNumber/CODE_DELIMITER/+=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/continue/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/secondBuildingAppearNumber/CODE_DELIMITER/+=/CODE_DELIMITER/firstBuildingAppearNumber/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/result/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/// numberOfWays returns the sum of number ways of selecting first building/CODE_DELIMITER/// and the number of ways of selecting second building which gives us the/CODE_DELIMITER/// number of ways of selecting three building such that no/CODE_DELIMITER/// consecutive buildings are in the same category./CODE_DELIMITER/// Runtime: O(n)/CODE_DELIMITER/// Space: O(n)/CODE_DELIMITER/long/CODE_DELIMITER/long/CODE_DELIMITER/numberOfWays/CODE_DELIMITER/(/CODE_DELIMITER/char/CODE_DELIMITER/*/CODE_DELIMITER/s/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/numberOfWaysForChar/CODE_DELIMITER/(/CODE_DELIMITER/s/CODE_DELIMITER/,/CODE_DELIMITER/'0'/CODE_DELIMITER/)/CODE_DELIMITER/+/CODE_DELIMITER/numberOfWaysForChar/CODE_DELIMITER/(/CODE_DELIMITER/s/CODE_DELIMITER/,/CODE_DELIMITER/'1'/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}
/* Author : Saurav Dubey *//CODE_DELIMITER/int/CODE_DELIMITER/countSubstrings/CODE_DELIMITER/(/CODE_DELIMITER/char/CODE_DELIMITER/*/CODE_DELIMITER/s/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/len/CODE_DELIMITER/=/CODE_DELIMITER/strlen/CODE_DELIMITER/(/CODE_DELIMITER/s/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/count/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/len/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/// cases handled for both odd and even lenghted Palindrome/CODE_DELIMITER/count/CODE_DELIMITER/+=/CODE_DELIMITER/countPalin/CODE_DELIMITER/(/CODE_DELIMITER/s/CODE_DELIMITER/,/CODE_DELIMITER/i/CODE_DELIMITER/,/CODE_DELIMITER/i/CODE_DELIMITER/,/CODE_DELIMITER/len/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/i/CODE_DELIMITER/!=/CODE_DELIMITER/len/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/)/CODE_DELIMITER/count/CODE_DELIMITER/+=/CODE_DELIMITER/countPalin/CODE_DELIMITER/(/CODE_DELIMITER/s/CODE_DELIMITER/,/CODE_DELIMITER/i/CODE_DELIMITER/,/CODE_DELIMITER/i/CODE_DELIMITER/+/CODE_DELIMITER/1/CODE_DELIMITER/,/CODE_DELIMITER/len/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/count/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/int/CODE_DELIMITER/countPalin/CODE_DELIMITER/(/CODE_DELIMITER/char/CODE_DELIMITER/*/CODE_DELIMITER/s/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/head/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/tail/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/len/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/ret/CODE_DELIMITER/=/CODE_DELIMITER/(/CODE_DELIMITER/s/CODE_DELIMITER/[/CODE_DELIMITER/head/CODE_DELIMITER/]/CODE_DELIMITER/==/CODE_DELIMITER/s/CODE_DELIMITER/[/CODE_DELIMITER/tail/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/?/CODE_DELIMITER/1/CODE_DELIMITER/:/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/ret/CODE_DELIMITER/&&/CODE_DELIMITER/head/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/>=/CODE_DELIMITER/0/CODE_DELIMITER/&&/CODE_DELIMITER/tail/CODE_DELIMITER/+/CODE_DELIMITER/1/CODE_DELIMITER/</CODE_DELIMITER/len/CODE_DELIMITER/)/CODE_DELIMITER/ret/CODE_DELIMITER/+=/CODE_DELIMITER/countPalin/CODE_DELIMITER/(/CODE_DELIMITER/s/CODE_DELIMITER/,/CODE_DELIMITER/head/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/,/CODE_DELIMITER/tail/CODE_DELIMITER/+/CODE_DELIMITER/1/CODE_DELIMITER/,/CODE_DELIMITER/len/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/ret/CODE_DELIMITER/;/CODE_DELIMITER/}
struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/invertTree/CODE_DELIMITER/(/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/root/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/tmp/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/==/CODE_DELIMITER/NULL/CODE_DELIMITER/)/CODE_DELIMITER/return/CODE_DELIMITER/NULL/CODE_DELIMITER/;/CODE_DELIMITER/tmp/CODE_DELIMITER/=/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/left/CODE_DELIMITER/;/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/left/CODE_DELIMITER/=/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/right/CODE_DELIMITER/;/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/right/CODE_DELIMITER/=/CODE_DELIMITER/tmp/CODE_DELIMITER/;/CODE_DELIMITER/invertTree/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/left/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/invertTree/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/right/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/root/CODE_DELIMITER/;/CODE_DELIMITER/}
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 *//CODE_DELIMITER/// Depth-First Search/CODE_DELIMITER/// Runtime: O(n)/CODE_DELIMITER/// Space: O(1)/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/trimBST/CODE_DELIMITER/(/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/root/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/low/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/high/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/==/CODE_DELIMITER/NULL/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/NULL/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/val/CODE_DELIMITER/>/CODE_DELIMITER/high/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/trimBST/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/left/CODE_DELIMITER/,/CODE_DELIMITER/low/CODE_DELIMITER/,/CODE_DELIMITER/high/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/val/CODE_DELIMITER/</CODE_DELIMITER/low/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/trimBST/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/right/CODE_DELIMITER/,/CODE_DELIMITER/low/CODE_DELIMITER/,/CODE_DELIMITER/high/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/left/CODE_DELIMITER/=/CODE_DELIMITER/trimBST/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/left/CODE_DELIMITER/,/CODE_DELIMITER/low/CODE_DELIMITER/,/CODE_DELIMITER/high/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/right/CODE_DELIMITER/=/CODE_DELIMITER/trimBST/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/right/CODE_DELIMITER/,/CODE_DELIMITER/low/CODE_DELIMITER/,/CODE_DELIMITER/high/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/root/CODE_DELIMITER/;/CODE_DELIMITER/}
int/CODE_DELIMITER/findLengthOfLCIS/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/nums/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/numsSize/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/maxval/CODE_DELIMITER/=/CODE_DELIMITER/1/CODE_DELIMITER/,/CODE_DELIMITER/i/CODE_DELIMITER/,/CODE_DELIMITER/count/CODE_DELIMITER/=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/numsSize/CODE_DELIMITER/==/CODE_DELIMITER/0/CODE_DELIMITER/)/CODE_DELIMITER/return/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/numsSize/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/>/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/count/CODE_DELIMITER/++/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/count/CODE_DELIMITER/>=/CODE_DELIMITER/maxval/CODE_DELIMITER/)/CODE_DELIMITER/maxval/CODE_DELIMITER/=/CODE_DELIMITER/count/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/else/CODE_DELIMITER/{/CODE_DELIMITER/count/CODE_DELIMITER/=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/maxval/CODE_DELIMITER/;/CODE_DELIMITER/}
/**
 * Note: The returned array must be malloced, assume caller calls free().
 *//CODE_DELIMITER/int/CODE_DELIMITER/find/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/sets/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/index/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/while/CODE_DELIMITER/(/CODE_DELIMITER/sets/CODE_DELIMITER/[/CODE_DELIMITER/index/CODE_DELIMITER/]/CODE_DELIMITER/!=/CODE_DELIMITER/index/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/index/CODE_DELIMITER/=/CODE_DELIMITER/sets/CODE_DELIMITER/[/CODE_DELIMITER/index/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/index/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/void/CODE_DELIMITER/unionSet/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/sets/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/i1/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/i2/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/i1Parent/CODE_DELIMITER/=/CODE_DELIMITER/find/CODE_DELIMITER/(/CODE_DELIMITER/sets/CODE_DELIMITER/,/CODE_DELIMITER/i1/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/i2Parent/CODE_DELIMITER/=/CODE_DELIMITER/find/CODE_DELIMITER/(/CODE_DELIMITER/sets/CODE_DELIMITER/,/CODE_DELIMITER/i2/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/sets/CODE_DELIMITER/[/CODE_DELIMITER/i1Parent/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/i2Parent/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/// Union find/CODE_DELIMITER/// Runtime: O(n)/CODE_DELIMITER/// Space: O(n)/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/findRedundantConnection/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/*/CODE_DELIMITER/edges/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/edgesSize/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/edgesColSize/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/returnSize/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/setsSize/CODE_DELIMITER/=/CODE_DELIMITER/edgesSize/CODE_DELIMITER/+/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/sets/CODE_DELIMITER/=/CODE_DELIMITER/malloc/CODE_DELIMITER/(/CODE_DELIMITER/setsSize/CODE_DELIMITER/*/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/setsSize/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/sets/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/i/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/result/CODE_DELIMITER/=/CODE_DELIMITER/malloc/CODE_DELIMITER/(/CODE_DELIMITER/2/CODE_DELIMITER/*/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/*/CODE_DELIMITER/returnSize/CODE_DELIMITER/=/CODE_DELIMITER/2/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/edgesSize/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/edge/CODE_DELIMITER/=/CODE_DELIMITER/edges/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/i0Parent/CODE_DELIMITER/=/CODE_DELIMITER/find/CODE_DELIMITER/(/CODE_DELIMITER/sets/CODE_DELIMITER/,/CODE_DELIMITER/edge/CODE_DELIMITER/[/CODE_DELIMITER/0/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/i1Parent/CODE_DELIMITER/=/CODE_DELIMITER/find/CODE_DELIMITER/(/CODE_DELIMITER/sets/CODE_DELIMITER/,/CODE_DELIMITER/edge/CODE_DELIMITER/[/CODE_DELIMITER/1/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/i0Parent/CODE_DELIMITER/==/CODE_DELIMITER/i1Parent/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/result/CODE_DELIMITER/[/CODE_DELIMITER/0/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/edge/CODE_DELIMITER/[/CODE_DELIMITER/0/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/result/CODE_DELIMITER/[/CODE_DELIMITER/1/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/edge/CODE_DELIMITER/[/CODE_DELIMITER/1/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/continue/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/unionSet/CODE_DELIMITER/(/CODE_DELIMITER/sets/CODE_DELIMITER/,/CODE_DELIMITER/i0Parent/CODE_DELIMITER/,/CODE_DELIMITER/i1Parent/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/free/CODE_DELIMITER/(/CODE_DELIMITER/sets/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/result/CODE_DELIMITER/;/CODE_DELIMITER/}
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 *//CODE_DELIMITER/#/CODE_DELIMITER/define/CODE_DELIMITER/max/CODE_DELIMITER/(/CODE_DELIMITER/a/CODE_DELIMITER/,/CODE_DELIMITER/b/CODE_DELIMITER/)/CODE_DELIMITER/(/CODE_DELIMITER/(/CODE_DELIMITER/(/CODE_DELIMITER/a/CODE_DELIMITER/)/CODE_DELIMITER/>/CODE_DELIMITER/(/CODE_DELIMITER/b/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/?/CODE_DELIMITER/(/CODE_DELIMITER/a/CODE_DELIMITER/)/CODE_DELIMITER/:/CODE_DELIMITER/(/CODE_DELIMITER/b/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/#/CODE_DELIMITER/define/CODE_DELIMITER/min/CODE_DELIMITER/(/CODE_DELIMITER/a/CODE_DELIMITER/,/CODE_DELIMITER/b/CODE_DELIMITER/)/CODE_DELIMITER/(/CODE_DELIMITER/(/CODE_DELIMITER/(/CODE_DELIMITER/a/CODE_DELIMITER/)/CODE_DELIMITER/</CODE_DELIMITER/(/CODE_DELIMITER/b/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/?/CODE_DELIMITER/(/CODE_DELIMITER/a/CODE_DELIMITER/)/CODE_DELIMITER/:/CODE_DELIMITER/(/CODE_DELIMITER/b/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/void/CODE_DELIMITER/recursiveSolve/CODE_DELIMITER/(/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/node/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/result/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/minVal/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/maxVal/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/node/CODE_DELIMITER/==/CODE_DELIMITER/NULL/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/*/CODE_DELIMITER/result/CODE_DELIMITER/=/CODE_DELIMITER/max/CODE_DELIMITER/(/CODE_DELIMITER/*/CODE_DELIMITER/result/CODE_DELIMITER/,/CODE_DELIMITER/abs/CODE_DELIMITER/(/CODE_DELIMITER/minVal/CODE_DELIMITER/-/CODE_DELIMITER/node/CODE_DELIMITER/->/CODE_DELIMITER/val/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/*/CODE_DELIMITER/result/CODE_DELIMITER/=/CODE_DELIMITER/max/CODE_DELIMITER/(/CODE_DELIMITER/*/CODE_DELIMITER/result/CODE_DELIMITER/,/CODE_DELIMITER/abs/CODE_DELIMITER/(/CODE_DELIMITER/maxVal/CODE_DELIMITER/-/CODE_DELIMITER/node/CODE_DELIMITER/->/CODE_DELIMITER/val/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/minVal/CODE_DELIMITER/=/CODE_DELIMITER/min/CODE_DELIMITER/(/CODE_DELIMITER/minVal/CODE_DELIMITER/,/CODE_DELIMITER/node/CODE_DELIMITER/->/CODE_DELIMITER/val/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/maxVal/CODE_DELIMITER/=/CODE_DELIMITER/max/CODE_DELIMITER/(/CODE_DELIMITER/maxVal/CODE_DELIMITER/,/CODE_DELIMITER/node/CODE_DELIMITER/->/CODE_DELIMITER/val/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/recursiveSolve/CODE_DELIMITER/(/CODE_DELIMITER/node/CODE_DELIMITER/->/CODE_DELIMITER/left/CODE_DELIMITER/,/CODE_DELIMITER/result/CODE_DELIMITER/,/CODE_DELIMITER/minVal/CODE_DELIMITER/,/CODE_DELIMITER/maxVal/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/recursiveSolve/CODE_DELIMITER/(/CODE_DELIMITER/node/CODE_DELIMITER/->/CODE_DELIMITER/right/CODE_DELIMITER/,/CODE_DELIMITER/result/CODE_DELIMITER/,/CODE_DELIMITER/minVal/CODE_DELIMITER/,/CODE_DELIMITER/maxVal/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/// Depth First Search/CODE_DELIMITER/// If The maximum diff is exists it should be the difference of the MAX or MIN value in the tree path to the LEAF/CODE_DELIMITER/// Runtime: O(n)/CODE_DELIMITER/// Space: O(1)/CODE_DELIMITER/int/CODE_DELIMITER/maxAncestorDiff/CODE_DELIMITER/(/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/root/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/result/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/maxVal/CODE_DELIMITER/=/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/val/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/minVal/CODE_DELIMITER/=/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/val/CODE_DELIMITER/;/CODE_DELIMITER/recursiveSolve/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/,/CODE_DELIMITER/&/CODE_DELIMITER/result/CODE_DELIMITER/,/CODE_DELIMITER/minVal/CODE_DELIMITER/,/CODE_DELIMITER/maxVal/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/result/CODE_DELIMITER/;/CODE_DELIMITER/}
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 *//CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/searchBST/CODE_DELIMITER/(/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/root/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/val/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/!/CODE_DELIMITER/root/CODE_DELIMITER/)/CODE_DELIMITER/return/CODE_DELIMITER/NULL/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/val/CODE_DELIMITER/==/CODE_DELIMITER/val/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/root/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/else/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/val/CODE_DELIMITER/>/CODE_DELIMITER/val/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/searchBST/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/left/CODE_DELIMITER/,/CODE_DELIMITER/val/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/else/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/searchBST/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/right/CODE_DELIMITER/,/CODE_DELIMITER/val/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/}
struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/insertIntoBST/CODE_DELIMITER/(/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/root/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/val/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/==/CODE_DELIMITER/NULL/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/new_val/CODE_DELIMITER/=/CODE_DELIMITER/malloc/CODE_DELIMITER/(/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/new_val/CODE_DELIMITER/->/CODE_DELIMITER/val/CODE_DELIMITER/=/CODE_DELIMITER/val/CODE_DELIMITER/;/CODE_DELIMITER/new_val/CODE_DELIMITER/->/CODE_DELIMITER/left/CODE_DELIMITER/=/CODE_DELIMITER/new_val/CODE_DELIMITER/->/CODE_DELIMITER/right/CODE_DELIMITER/=/CODE_DELIMITER/NULL/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/new_val/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/else/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/val/CODE_DELIMITER/>=/CODE_DELIMITER/val/CODE_DELIMITER/)/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/left/CODE_DELIMITER/=/CODE_DELIMITER/insertIntoBST/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/left/CODE_DELIMITER/,/CODE_DELIMITER/val/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/else/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/right/CODE_DELIMITER/=/CODE_DELIMITER/insertIntoBST/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/right/CODE_DELIMITER/,/CODE_DELIMITER/val/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/root/CODE_DELIMITER/;/CODE_DELIMITER/}
int/CODE_DELIMITER/search/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/nums/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/numsSize/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/target/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/low/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/,/CODE_DELIMITER/high/CODE_DELIMITER/=/CODE_DELIMITER/numsSize/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/while/CODE_DELIMITER/(/CODE_DELIMITER/low/CODE_DELIMITER/<=/CODE_DELIMITER/high/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/mid/CODE_DELIMITER/=/CODE_DELIMITER/low/CODE_DELIMITER/+/CODE_DELIMITER/(/CODE_DELIMITER/high/CODE_DELIMITER/-/CODE_DELIMITER/low/CODE_DELIMITER/)/CODE_DELIMITER///CODE_DELIMITER/2/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/target/CODE_DELIMITER/>/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/mid/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/low/CODE_DELIMITER/=/CODE_DELIMITER/mid/CODE_DELIMITER/+/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/else/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/target/CODE_DELIMITER/</CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/mid/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/high/CODE_DELIMITER/=/CODE_DELIMITER/mid/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/else/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/mid/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER//* Another solution: Using bsearch() *//CODE_DELIMITER/int/CODE_DELIMITER/cmpint/CODE_DELIMITER/(/CODE_DELIMITER/const/CODE_DELIMITER/void/CODE_DELIMITER/*/CODE_DELIMITER/a/CODE_DELIMITER/,/CODE_DELIMITER/const/CODE_DELIMITER/void/CODE_DELIMITER/*/CODE_DELIMITER/b/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/*/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/)/CODE_DELIMITER/a/CODE_DELIMITER/-/CODE_DELIMITER/*/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/)/CODE_DELIMITER/b/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/int/CODE_DELIMITER/search/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/nums/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/numsSize/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/target/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/ret/CODE_DELIMITER/=/CODE_DELIMITER/bsearch/CODE_DELIMITER/(/CODE_DELIMITER/&/CODE_DELIMITER/target/CODE_DELIMITER/,/CODE_DELIMITER/nums/CODE_DELIMITER/,/CODE_DELIMITER/numsSize/CODE_DELIMITER/,/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/)/CODE_DELIMITER/,/CODE_DELIMITER/cmpint/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/ret/CODE_DELIMITER/)/CODE_DELIMITER/return/CODE_DELIMITER/(/CODE_DELIMITER/ret/CODE_DELIMITER/-/CODE_DELIMITER/nums/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/else/CODE_DELIMITER/return/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/}
char/CODE_DELIMITER/*/CODE_DELIMITER/toLowerCase/CODE_DELIMITER/(/CODE_DELIMITER/char/CODE_DELIMITER/*/CODE_DELIMITER/str/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/strlen/CODE_DELIMITER/(/CODE_DELIMITER/str/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/str/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/tolower/CODE_DELIMITER/(/CODE_DELIMITER/str/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/str/CODE_DELIMITER/;/CODE_DELIMITER/}
bool/CODE_DELIMITER/isAnagram/CODE_DELIMITER/(/CODE_DELIMITER/char/CODE_DELIMITER/*/CODE_DELIMITER/s/CODE_DELIMITER/,/CODE_DELIMITER/char/CODE_DELIMITER/*/CODE_DELIMITER/t/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/n/CODE_DELIMITER/=/CODE_DELIMITER/strlen/CODE_DELIMITER/(/CODE_DELIMITER/s/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/m/CODE_DELIMITER/=/CODE_DELIMITER/strlen/CODE_DELIMITER/(/CODE_DELIMITER/t/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/cnt_s/CODE_DELIMITER/[/CODE_DELIMITER/1000/CODE_DELIMITER/]/CODE_DELIMITER/,/CODE_DELIMITER/cnt_t/CODE_DELIMITER/[/CODE_DELIMITER/1000/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/c/CODE_DELIMITER/=/CODE_DELIMITER/97/CODE_DELIMITER/;/CODE_DELIMITER/c/CODE_DELIMITER/</CODE_DELIMITER/97/CODE_DELIMITER/+/CODE_DELIMITER/26/CODE_DELIMITER/;/CODE_DELIMITER/c/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/cnt_s/CODE_DELIMITER/[/CODE_DELIMITER/c/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/cnt_t/CODE_DELIMITER/[/CODE_DELIMITER/c/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/n/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/cnt_s/CODE_DELIMITER/[/CODE_DELIMITER/s/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/]/CODE_DELIMITER/++/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/m/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/cnt_t/CODE_DELIMITER/[/CODE_DELIMITER/t/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/]/CODE_DELIMITER/++/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/c/CODE_DELIMITER/=/CODE_DELIMITER/97/CODE_DELIMITER/;/CODE_DELIMITER/c/CODE_DELIMITER/</CODE_DELIMITER/97/CODE_DELIMITER/+/CODE_DELIMITER/26/CODE_DELIMITER/;/CODE_DELIMITER/c/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/cnt_s/CODE_DELIMITER/[/CODE_DELIMITER/c/CODE_DELIMITER/]/CODE_DELIMITER/!=/CODE_DELIMITER/cnt_t/CODE_DELIMITER/[/CODE_DELIMITER/c/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/return/CODE_DELIMITER/false/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/true/CODE_DELIMITER/;/CODE_DELIMITER/}
// for strlen()/CODE_DELIMITER/#/CODE_DELIMITER/include/CODE_DELIMITER/</CODE_DELIMITER/string/CODE_DELIMITER/./CODE_DELIMITER/h/CODE_DELIMITER/>/CODE_DELIMITER/int/CODE_DELIMITER/numJewelsInStones/CODE_DELIMITER/(/CODE_DELIMITER/char/CODE_DELIMITER/*/CODE_DELIMITER/j/CODE_DELIMITER/,/CODE_DELIMITER/char/CODE_DELIMITER/*/CODE_DELIMITER/s/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/// as strlen is O(n), store it once rather than using it in for loop/CODE_DELIMITER/int/CODE_DELIMITER/cnt/CODE_DELIMITER/[/CODE_DELIMITER/500/CODE_DELIMITER/]/CODE_DELIMITER/,/CODE_DELIMITER/lens/CODE_DELIMITER/=/CODE_DELIMITER/strlen/CODE_DELIMITER/(/CODE_DELIMITER/s/CODE_DELIMITER/)/CODE_DELIMITER/,/CODE_DELIMITER/lenj/CODE_DELIMITER/=/CODE_DELIMITER/strlen/CODE_DELIMITER/(/CODE_DELIMITER/j/CODE_DELIMITER/)/CODE_DELIMITER/,/CODE_DELIMITER/sol/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/memset/CODE_DELIMITER/(/CODE_DELIMITER/cnt/CODE_DELIMITER/,/CODE_DELIMITER/0/CODE_DELIMITER/,/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/cnt/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/// lookup to know which character occurs in j/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/lenj/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/cnt/CODE_DELIMITER/[/CODE_DELIMITER/j/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/]/CODE_DELIMITER/++/CODE_DELIMITER/;/CODE_DELIMITER/// count the characters in s/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/lens/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/sol/CODE_DELIMITER/+=/CODE_DELIMITER/cnt/CODE_DELIMITER/[/CODE_DELIMITER/s/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/sol/CODE_DELIMITER/;/CODE_DELIMITER/}
int/CODE_DELIMITER/missingNumber/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/nums/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/numsSize/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/,/CODE_DELIMITER/actual_sum/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/,/CODE_DELIMITER/sum/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/numsSize/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/sum/CODE_DELIMITER/=/CODE_DELIMITER/sum/CODE_DELIMITER/+/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/actual_sum/CODE_DELIMITER/=/CODE_DELIMITER/actual_sum/CODE_DELIMITER/+/CODE_DELIMITER/i/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/actual_sum/CODE_DELIMITER/+/CODE_DELIMITER/numsSize/CODE_DELIMITER/-/CODE_DELIMITER/sum/CODE_DELIMITER/;/CODE_DELIMITER/}
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 *//CODE_DELIMITER/int/CODE_DELIMITER/maxval/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/a/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/b/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/a/CODE_DELIMITER/>/CODE_DELIMITER/b/CODE_DELIMITER/)/CODE_DELIMITER/return/CODE_DELIMITER/a/CODE_DELIMITER/;/CODE_DELIMITER/else/CODE_DELIMITER/return/CODE_DELIMITER/b/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/int/CODE_DELIMITER/maxDepth/CODE_DELIMITER/(/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/root/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/==/CODE_DELIMITER/NULL/CODE_DELIMITER/)/CODE_DELIMITER/return/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/else/CODE_DELIMITER/return/CODE_DELIMITER/1/CODE_DELIMITER/+/CODE_DELIMITER/maxval/CODE_DELIMITER/(/CODE_DELIMITER/maxDepth/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/left/CODE_DELIMITER/)/CODE_DELIMITER/,/CODE_DELIMITER/maxDepth/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/right/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}
#/CODE_DELIMITER/define/CODE_DELIMITER/min/CODE_DELIMITER/(/CODE_DELIMITER/a/CODE_DELIMITER/,/CODE_DELIMITER/b/CODE_DELIMITER/)/CODE_DELIMITER/(/CODE_DELIMITER/(/CODE_DELIMITER/(/CODE_DELIMITER/a/CODE_DELIMITER/)/CODE_DELIMITER/</CODE_DELIMITER/(/CODE_DELIMITER/b/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/?/CODE_DELIMITER/(/CODE_DELIMITER/a/CODE_DELIMITER/)/CODE_DELIMITER/:/CODE_DELIMITER/(/CODE_DELIMITER/b/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/#/CODE_DELIMITER/define/CODE_DELIMITER/max/CODE_DELIMITER/(/CODE_DELIMITER/a/CODE_DELIMITER/,/CODE_DELIMITER/b/CODE_DELIMITER/)/CODE_DELIMITER/(/CODE_DELIMITER/(/CODE_DELIMITER/(/CODE_DELIMITER/a/CODE_DELIMITER/)/CODE_DELIMITER/>/CODE_DELIMITER/(/CODE_DELIMITER/b/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/?/CODE_DELIMITER/(/CODE_DELIMITER/a/CODE_DELIMITER/)/CODE_DELIMITER/:/CODE_DELIMITER/(/CODE_DELIMITER/b/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/// Collect maxes on each row and each column./CODE_DELIMITER/// Runtime: O(n * n)/CODE_DELIMITER/// Space: O(n)/CODE_DELIMITER/int/CODE_DELIMITER/maxIncreaseKeepingSkyline/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/*/CODE_DELIMITER/grid/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/gridSize/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/gridColSize/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/rowsMaxs/CODE_DELIMITER/=/CODE_DELIMITER/calloc/CODE_DELIMITER/(/CODE_DELIMITER/gridSize/CODE_DELIMITER/,/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/colsMaxs/CODE_DELIMITER/=/CODE_DELIMITER/calloc/CODE_DELIMITER/(/CODE_DELIMITER/gridSize/CODE_DELIMITER/,/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/// Find max of each row and column/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/gridSize/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/j/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/j/CODE_DELIMITER/</CODE_DELIMITER/gridSize/CODE_DELIMITER/;/CODE_DELIMITER/j/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/rowsMaxs/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/max/CODE_DELIMITER/(/CODE_DELIMITER/rowsMaxs/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/,/CODE_DELIMITER/grid/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/[/CODE_DELIMITER/j/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/colsMaxs/CODE_DELIMITER/[/CODE_DELIMITER/j/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/max/CODE_DELIMITER/(/CODE_DELIMITER/colsMaxs/CODE_DELIMITER/[/CODE_DELIMITER/j/CODE_DELIMITER/]/CODE_DELIMITER/,/CODE_DELIMITER/grid/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/[/CODE_DELIMITER/j/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/}/CODE_DELIMITER/int/CODE_DELIMITER/result/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/gridSize/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/j/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/j/CODE_DELIMITER/</CODE_DELIMITER/gridSize/CODE_DELIMITER/;/CODE_DELIMITER/j/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/rowMax/CODE_DELIMITER/=/CODE_DELIMITER/rowsMaxs/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/colMax/CODE_DELIMITER/=/CODE_DELIMITER/colsMaxs/CODE_DELIMITER/[/CODE_DELIMITER/j/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/result/CODE_DELIMITER/+=/CODE_DELIMITER/min/CODE_DELIMITER/(/CODE_DELIMITER/rowMax/CODE_DELIMITER/-/CODE_DELIMITER/grid/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/[/CODE_DELIMITER/j/CODE_DELIMITER/]/CODE_DELIMITER/,/CODE_DELIMITER/colMax/CODE_DELIMITER/-/CODE_DELIMITER/grid/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/[/CODE_DELIMITER/j/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/}/CODE_DELIMITER/free/CODE_DELIMITER/(/CODE_DELIMITER/rowsMaxs/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/free/CODE_DELIMITER/(/CODE_DELIMITER/colsMaxs/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/result/CODE_DELIMITER/;/CODE_DELIMITER/}
// Forward declaration of isBadVersion API./CODE_DELIMITER/bool/CODE_DELIMITER/isBadVersion/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/version/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/firstBadVersion/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/n/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/low/CODE_DELIMITER/=/CODE_DELIMITER/1/CODE_DELIMITER/,/CODE_DELIMITER/high/CODE_DELIMITER/=/CODE_DELIMITER/n/CODE_DELIMITER/;/CODE_DELIMITER/while/CODE_DELIMITER/(/CODE_DELIMITER/low/CODE_DELIMITER/<=/CODE_DELIMITER/high/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/mid/CODE_DELIMITER/=/CODE_DELIMITER/low/CODE_DELIMITER/+/CODE_DELIMITER/(/CODE_DELIMITER/high/CODE_DELIMITER/-/CODE_DELIMITER/low/CODE_DELIMITER/)/CODE_DELIMITER///CODE_DELIMITER/2/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/isBadVersion/CODE_DELIMITER/(/CODE_DELIMITER/mid/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/high/CODE_DELIMITER/=/CODE_DELIMITER/mid/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/else/CODE_DELIMITER/{/CODE_DELIMITER/low/CODE_DELIMITER/=/CODE_DELIMITER/mid/CODE_DELIMITER/+/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/low/CODE_DELIMITER/;/CODE_DELIMITER/}
int/CODE_DELIMITER/singleNumber/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/nums/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/numsSize/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/,/CODE_DELIMITER/result/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/numsSize/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/result/CODE_DELIMITER/=/CODE_DELIMITER/result/CODE_DELIMITER/^/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/result/CODE_DELIMITER/;/CODE_DELIMITER/}
void/CODE_DELIMITER/visitRooms/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/key/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/*/CODE_DELIMITER/rooms/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/roomsSize/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/roomsColSize/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/visitedRooms/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/visitedRooms/CODE_DELIMITER/[/CODE_DELIMITER/key/CODE_DELIMITER/]/CODE_DELIMITER/==/CODE_DELIMITER/1/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/visitedRooms/CODE_DELIMITER/[/CODE_DELIMITER/key/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/roomsColSize/CODE_DELIMITER/[/CODE_DELIMITER/key/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/visitRooms/CODE_DELIMITER/(/CODE_DELIMITER/rooms/CODE_DELIMITER/[/CODE_DELIMITER/key/CODE_DELIMITER/]/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/,/CODE_DELIMITER/rooms/CODE_DELIMITER/,/CODE_DELIMITER/roomsSize/CODE_DELIMITER/,/CODE_DELIMITER/roomsColSize/CODE_DELIMITER/,/CODE_DELIMITER/visitedRooms/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/}/CODE_DELIMITER/// Depth-first search/CODE_DELIMITER/// Runtime: O(n)/CODE_DELIMITER/// Space: O(n)/CODE_DELIMITER/bool/CODE_DELIMITER/canVisitAllRooms/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/*/CODE_DELIMITER/rooms/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/roomsSize/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/roomsColSize/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/visitedRooms/CODE_DELIMITER/=/CODE_DELIMITER/calloc/CODE_DELIMITER/(/CODE_DELIMITER/roomsSize/CODE_DELIMITER/,/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/visitRooms/CODE_DELIMITER/(/CODE_DELIMITER/0/CODE_DELIMITER/,/CODE_DELIMITER/rooms/CODE_DELIMITER/,/CODE_DELIMITER/roomsSize/CODE_DELIMITER/,/CODE_DELIMITER/roomsColSize/CODE_DELIMITER/,/CODE_DELIMITER/visitedRooms/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/visitedRoomsNumber/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/roomsSize/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/visitedRooms/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/==/CODE_DELIMITER/1/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/visitedRoomsNumber/CODE_DELIMITER/++/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/visitedRoomsNumber/CODE_DELIMITER/==/CODE_DELIMITER/roomsSize/CODE_DELIMITER/;/CODE_DELIMITER/}
int/CODE_DELIMITER/peakIndexInMountainArray/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/A/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/ASize/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/low/CODE_DELIMITER/=/CODE_DELIMITER/1/CODE_DELIMITER/,/CODE_DELIMITER/high/CODE_DELIMITER/=/CODE_DELIMITER/ASize/CODE_DELIMITER/;/CODE_DELIMITER/while/CODE_DELIMITER/(/CODE_DELIMITER/low/CODE_DELIMITER/<=/CODE_DELIMITER/high/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/mid/CODE_DELIMITER/=/CODE_DELIMITER/low/CODE_DELIMITER/+/CODE_DELIMITER/(/CODE_DELIMITER/high/CODE_DELIMITER/-/CODE_DELIMITER/low/CODE_DELIMITER/)/CODE_DELIMITER///CODE_DELIMITER/2/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/A/CODE_DELIMITER/[/CODE_DELIMITER/mid/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/]/CODE_DELIMITER/</CODE_DELIMITER/A/CODE_DELIMITER/[/CODE_DELIMITER/mid/CODE_DELIMITER/]/CODE_DELIMITER/&&/CODE_DELIMITER/A/CODE_DELIMITER/[/CODE_DELIMITER/mid/CODE_DELIMITER/]/CODE_DELIMITER/>/CODE_DELIMITER/A/CODE_DELIMITER/[/CODE_DELIMITER/mid/CODE_DELIMITER/+/CODE_DELIMITER/1/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/return/CODE_DELIMITER/mid/CODE_DELIMITER/;/CODE_DELIMITER/else/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/A/CODE_DELIMITER/[/CODE_DELIMITER/mid/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/]/CODE_DELIMITER/</CODE_DELIMITER/A/CODE_DELIMITER/[/CODE_DELIMITER/mid/CODE_DELIMITER/]/CODE_DELIMITER/&&/CODE_DELIMITER/A/CODE_DELIMITER/[/CODE_DELIMITER/mid/CODE_DELIMITER/]/CODE_DELIMITER/</CODE_DELIMITER/A/CODE_DELIMITER/[/CODE_DELIMITER/mid/CODE_DELIMITER/+/CODE_DELIMITER/1/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/low/CODE_DELIMITER/=/CODE_DELIMITER/mid/CODE_DELIMITER/+/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/else/CODE_DELIMITER/high/CODE_DELIMITER/=/CODE_DELIMITER/mid/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/}
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 *//CODE_DELIMITER/struct/CODE_DELIMITER/ListNode/CODE_DELIMITER/*/CODE_DELIMITER/middleNode/CODE_DELIMITER/(/CODE_DELIMITER/struct/CODE_DELIMITER/ListNode/CODE_DELIMITER/*/CODE_DELIMITER/head/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/struct/CODE_DELIMITER/ListNode/CODE_DELIMITER/*/CODE_DELIMITER/fast/CODE_DELIMITER/,/CODE_DELIMITER/*/CODE_DELIMITER/slow/CODE_DELIMITER/;/CODE_DELIMITER/fast/CODE_DELIMITER/=/CODE_DELIMITER/slow/CODE_DELIMITER/=/CODE_DELIMITER/head/CODE_DELIMITER/;/CODE_DELIMITER/while/CODE_DELIMITER/(/CODE_DELIMITER/fast/CODE_DELIMITER/&&/CODE_DELIMITER/fast/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/slow/CODE_DELIMITER/=/CODE_DELIMITER/slow/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/;/CODE_DELIMITER/fast/CODE_DELIMITER/=/CODE_DELIMITER/fast/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/->/CODE_DELIMITER/next/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/slow/CODE_DELIMITER/;/CODE_DELIMITER/}
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 *//CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/convertBST/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/nums/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/left/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/right/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/left/CODE_DELIMITER/>/CODE_DELIMITER/right/CODE_DELIMITER/)/CODE_DELIMITER/return/CODE_DELIMITER/NULL/CODE_DELIMITER/;/CODE_DELIMITER/else/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/mid/CODE_DELIMITER/=/CODE_DELIMITER/(/CODE_DELIMITER/right/CODE_DELIMITER/+/CODE_DELIMITER/left/CODE_DELIMITER/)/CODE_DELIMITER///CODE_DELIMITER/2/CODE_DELIMITER/;/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/new_val/CODE_DELIMITER/=/CODE_DELIMITER/malloc/CODE_DELIMITER/(/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/new_val/CODE_DELIMITER/->/CODE_DELIMITER/val/CODE_DELIMITER/=/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/mid/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/new_val/CODE_DELIMITER/->/CODE_DELIMITER/left/CODE_DELIMITER/=/CODE_DELIMITER/convertBST/CODE_DELIMITER/(/CODE_DELIMITER/nums/CODE_DELIMITER/,/CODE_DELIMITER/left/CODE_DELIMITER/,/CODE_DELIMITER/mid/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/new_val/CODE_DELIMITER/->/CODE_DELIMITER/right/CODE_DELIMITER/=/CODE_DELIMITER/convertBST/CODE_DELIMITER/(/CODE_DELIMITER/nums/CODE_DELIMITER/,/CODE_DELIMITER/mid/CODE_DELIMITER/+/CODE_DELIMITER/1/CODE_DELIMITER/,/CODE_DELIMITER/right/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/new_val/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/}/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/sortedArrayToBST/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/nums/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/numsSize/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/numsSize/CODE_DELIMITER/==/CODE_DELIMITER/0/CODE_DELIMITER/)/CODE_DELIMITER/return/CODE_DELIMITER/NULL/CODE_DELIMITER/;/CODE_DELIMITER/else/CODE_DELIMITER/return/CODE_DELIMITER/convertBST/CODE_DELIMITER/(/CODE_DELIMITER/nums/CODE_DELIMITER/,/CODE_DELIMITER/0/CODE_DELIMITER/,/CODE_DELIMITER/numsSize/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}
// Use monotonic stack./CODE_DELIMITER/// Keep the stack of monotonically increasing price and index./CODE_DELIMITER/// Runtime: O(n)/CODE_DELIMITER/// Space: O(n)/CODE_DELIMITER/typedef/CODE_DELIMITER/struct/CODE_DELIMITER/stack/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/price/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/index/CODE_DELIMITER/;/CODE_DELIMITER/struct/CODE_DELIMITER/stack/CODE_DELIMITER/*/CODE_DELIMITER/previous/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/Stack/CODE_DELIMITER/;/CODE_DELIMITER/typedef/CODE_DELIMITER/struct/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/index/CODE_DELIMITER/;/CODE_DELIMITER/Stack/CODE_DELIMITER/*/CODE_DELIMITER/stackPointer/CODE_DELIMITER/;/CODE_DELIMITER/Stack/CODE_DELIMITER/*/CODE_DELIMITER/sentry/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/StockSpanner/CODE_DELIMITER/;/CODE_DELIMITER/StockSpanner/CODE_DELIMITER/*/CODE_DELIMITER/stockSpannerCreate/CODE_DELIMITER/(/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/Stack/CODE_DELIMITER/*/CODE_DELIMITER/sentry/CODE_DELIMITER/=/CODE_DELIMITER/(/CODE_DELIMITER/Stack/CODE_DELIMITER/*/CODE_DELIMITER/)/CODE_DELIMITER/malloc/CODE_DELIMITER/(/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/Stack/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/StockSpanner/CODE_DELIMITER/*/CODE_DELIMITER/result/CODE_DELIMITER/=/CODE_DELIMITER/(/CODE_DELIMITER/StockSpanner/CODE_DELIMITER/*/CODE_DELIMITER/)/CODE_DELIMITER/malloc/CODE_DELIMITER/(/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/StockSpanner/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/result/CODE_DELIMITER/->/CODE_DELIMITER/index/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/result/CODE_DELIMITER/->/CODE_DELIMITER/sentry/CODE_DELIMITER/=/CODE_DELIMITER/sentry/CODE_DELIMITER/;/CODE_DELIMITER/result/CODE_DELIMITER/->/CODE_DELIMITER/stackPointer/CODE_DELIMITER/=/CODE_DELIMITER/sentry/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/result/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/int/CODE_DELIMITER/stockSpannerNext/CODE_DELIMITER/(/CODE_DELIMITER/StockSpanner/CODE_DELIMITER/*/CODE_DELIMITER/obj/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/price/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/while/CODE_DELIMITER/(/CODE_DELIMITER/obj/CODE_DELIMITER/->/CODE_DELIMITER/stackPointer/CODE_DELIMITER/!=/CODE_DELIMITER/obj/CODE_DELIMITER/->/CODE_DELIMITER/sentry/CODE_DELIMITER/&&/CODE_DELIMITER/obj/CODE_DELIMITER/->/CODE_DELIMITER/stackPointer/CODE_DELIMITER/->/CODE_DELIMITER/price/CODE_DELIMITER/<=/CODE_DELIMITER/price/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/Stack/CODE_DELIMITER/*/CODE_DELIMITER/currStackPointer/CODE_DELIMITER/=/CODE_DELIMITER/obj/CODE_DELIMITER/->/CODE_DELIMITER/stackPointer/CODE_DELIMITER/;/CODE_DELIMITER/obj/CODE_DELIMITER/->/CODE_DELIMITER/stackPointer/CODE_DELIMITER/=/CODE_DELIMITER/obj/CODE_DELIMITER/->/CODE_DELIMITER/stackPointer/CODE_DELIMITER/->/CODE_DELIMITER/previous/CODE_DELIMITER/;/CODE_DELIMITER/free/CODE_DELIMITER/(/CODE_DELIMITER/currStackPointer/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/obj/CODE_DELIMITER/->/CODE_DELIMITER/index/CODE_DELIMITER/+=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/result/CODE_DELIMITER/=/CODE_DELIMITER/obj/CODE_DELIMITER/->/CODE_DELIMITER/index/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/obj/CODE_DELIMITER/->/CODE_DELIMITER/stackPointer/CODE_DELIMITER/!=/CODE_DELIMITER/obj/CODE_DELIMITER/->/CODE_DELIMITER/sentry/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/result/CODE_DELIMITER/-=/CODE_DELIMITER/obj/CODE_DELIMITER/->/CODE_DELIMITER/stackPointer/CODE_DELIMITER/->/CODE_DELIMITER/index/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/Stack/CODE_DELIMITER/*/CODE_DELIMITER/newStackItem/CODE_DELIMITER/=/CODE_DELIMITER/(/CODE_DELIMITER/Stack/CODE_DELIMITER/*/CODE_DELIMITER/)/CODE_DELIMITER/malloc/CODE_DELIMITER/(/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/Stack/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/newStackItem/CODE_DELIMITER/->/CODE_DELIMITER/index/CODE_DELIMITER/=/CODE_DELIMITER/obj/CODE_DELIMITER/->/CODE_DELIMITER/index/CODE_DELIMITER/;/CODE_DELIMITER/newStackItem/CODE_DELIMITER/->/CODE_DELIMITER/price/CODE_DELIMITER/=/CODE_DELIMITER/price/CODE_DELIMITER/;/CODE_DELIMITER/newStackItem/CODE_DELIMITER/->/CODE_DELIMITER/previous/CODE_DELIMITER/=/CODE_DELIMITER/obj/CODE_DELIMITER/->/CODE_DELIMITER/stackPointer/CODE_DELIMITER/;/CODE_DELIMITER/obj/CODE_DELIMITER/->/CODE_DELIMITER/stackPointer/CODE_DELIMITER/=/CODE_DELIMITER/newStackItem/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/result/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/void/CODE_DELIMITER/stockSpannerFree/CODE_DELIMITER/(/CODE_DELIMITER/StockSpanner/CODE_DELIMITER/*/CODE_DELIMITER/obj/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/while/CODE_DELIMITER/(/CODE_DELIMITER/obj/CODE_DELIMITER/->/CODE_DELIMITER/stackPointer/CODE_DELIMITER/!=/CODE_DELIMITER/obj/CODE_DELIMITER/->/CODE_DELIMITER/sentry/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/Stack/CODE_DELIMITER/*/CODE_DELIMITER/currStackPointer/CODE_DELIMITER/=/CODE_DELIMITER/obj/CODE_DELIMITER/->/CODE_DELIMITER/stackPointer/CODE_DELIMITER/;/CODE_DELIMITER/obj/CODE_DELIMITER/->/CODE_DELIMITER/stackPointer/CODE_DELIMITER/=/CODE_DELIMITER/obj/CODE_DELIMITER/->/CODE_DELIMITER/stackPointer/CODE_DELIMITER/->/CODE_DELIMITER/previous/CODE_DELIMITER/;/CODE_DELIMITER/free/CODE_DELIMITER/(/CODE_DELIMITER/currStackPointer/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/free/CODE_DELIMITER/(/CODE_DELIMITER/obj/CODE_DELIMITER/->/CODE_DELIMITER/sentry/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/free/CODE_DELIMITER/(/CODE_DELIMITER/obj/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER//**
 * Your StockSpanner struct will be instantiated and called as such:
 * StockSpanner* obj = stockSpannerCreate();
 * int param_1 = stockSpannerNext(obj, price);
 
 * stockSpannerFree(obj);
 */
/**
 * 905. Sort Array By Parity
 * Given an array A of non-negative integers, return an array consisting of
 * all the even elements of A, followed by all the odd elements of A.
 * You may return any answer array that satisfies this condition.
 * Example 1:
 * Input: [3,1,2,4]
 * Output: [2,4,3,1]
 * The outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.
 *
 * Note: The returned array must be malloced, assume caller calls free().
 *//CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/sortArrayByParity/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/A/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/ASize/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/returnSize/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/retArr/CODE_DELIMITER/=/CODE_DELIMITER/malloc/CODE_DELIMITER/(/CODE_DELIMITER/ASize/CODE_DELIMITER/*/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/oddIndex/CODE_DELIMITER/=/CODE_DELIMITER/ASize/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/evenIndex/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/*/CODE_DELIMITER/returnSize/CODE_DELIMITER/=/CODE_DELIMITER/ASize/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/ASize/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/A/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/%/CODE_DELIMITER/2/CODE_DELIMITER/==/CODE_DELIMITER/0/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/retArr/CODE_DELIMITER/[/CODE_DELIMITER/evenIndex/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/A/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/evenIndex/CODE_DELIMITER/++/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/else/CODE_DELIMITER/{/CODE_DELIMITER/retArr/CODE_DELIMITER/[/CODE_DELIMITER/oddIndex/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/A/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/oddIndex/CODE_DELIMITER/--/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/retArr/CODE_DELIMITER/;/CODE_DELIMITER/}
char/CODE_DELIMITER/*/CODE_DELIMITER/reverseOnlyLetters/CODE_DELIMITER/(/CODE_DELIMITER/char/CODE_DELIMITER/*/CODE_DELIMITER/S/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/last/CODE_DELIMITER/=/CODE_DELIMITER/strlen/CODE_DELIMITER/(/CODE_DELIMITER/S/CODE_DELIMITER/)/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/,/CODE_DELIMITER/i/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/last/CODE_DELIMITER/;/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/!/CODE_DELIMITER/isalpha/CODE_DELIMITER/(/CODE_DELIMITER/S/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/;/CODE_DELIMITER/continue/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/!/CODE_DELIMITER/isalpha/CODE_DELIMITER/(/CODE_DELIMITER/S/CODE_DELIMITER/[/CODE_DELIMITER/last/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/last/CODE_DELIMITER/--/CODE_DELIMITER/;/CODE_DELIMITER/continue/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/char/CODE_DELIMITER/tmp/CODE_DELIMITER/=/CODE_DELIMITER/S/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/S/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/S/CODE_DELIMITER/[/CODE_DELIMITER/last/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/S/CODE_DELIMITER/[/CODE_DELIMITER/last/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/tmp/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/;/CODE_DELIMITER/last/CODE_DELIMITER/--/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/S/CODE_DELIMITER/;/CODE_DELIMITER/}
#/CODE_DELIMITER/define/CODE_DELIMITER/min/CODE_DELIMITER/(/CODE_DELIMITER/a/CODE_DELIMITER/,/CODE_DELIMITER/b/CODE_DELIMITER/)/CODE_DELIMITER/(/CODE_DELIMITER/(/CODE_DELIMITER/(/CODE_DELIMITER/a/CODE_DELIMITER/)/CODE_DELIMITER/</CODE_DELIMITER/(/CODE_DELIMITER/b/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/?/CODE_DELIMITER/(/CODE_DELIMITER/a/CODE_DELIMITER/)/CODE_DELIMITER/:/CODE_DELIMITER/(/CODE_DELIMITER/b/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/// Dynamic programming./CODE_DELIMITER/// Runtime O(n*n)/CODE_DELIMITER/// Space O(n)/CODE_DELIMITER/int/CODE_DELIMITER/minFallingPathSum/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/*/CODE_DELIMITER/matrix/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/matrixSize/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/matrixColSize/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/dp/CODE_DELIMITER/=/CODE_DELIMITER/calloc/CODE_DELIMITER/(/CODE_DELIMITER/matrixSize/CODE_DELIMITER/,/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/matrixSize/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/nextDp/CODE_DELIMITER/=/CODE_DELIMITER/calloc/CODE_DELIMITER/(/CODE_DELIMITER/matrixSize/CODE_DELIMITER/,/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/j/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/j/CODE_DELIMITER/</CODE_DELIMITER/matrixSize/CODE_DELIMITER/;/CODE_DELIMITER/j/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/nextDp/CODE_DELIMITER/[/CODE_DELIMITER/j/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/dp/CODE_DELIMITER/[/CODE_DELIMITER/j/CODE_DELIMITER/]/CODE_DELIMITER/+/CODE_DELIMITER/matrix/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/[/CODE_DELIMITER/j/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/// If not the first column - try to find minimum in prev column/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/j/CODE_DELIMITER/>/CODE_DELIMITER/0/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/nextDp/CODE_DELIMITER/[/CODE_DELIMITER/j/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/min/CODE_DELIMITER/(/CODE_DELIMITER/nextDp/CODE_DELIMITER/[/CODE_DELIMITER/j/CODE_DELIMITER/]/CODE_DELIMITER/,/CODE_DELIMITER/dp/CODE_DELIMITER/[/CODE_DELIMITER/j/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/]/CODE_DELIMITER/+/CODE_DELIMITER/matrix/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/[/CODE_DELIMITER/j/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/// If not the last column - try to find minimum in next column/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/j/CODE_DELIMITER/</CODE_DELIMITER/matrixSize/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/nextDp/CODE_DELIMITER/[/CODE_DELIMITER/j/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/min/CODE_DELIMITER/(/CODE_DELIMITER/nextDp/CODE_DELIMITER/[/CODE_DELIMITER/j/CODE_DELIMITER/]/CODE_DELIMITER/,/CODE_DELIMITER/dp/CODE_DELIMITER/[/CODE_DELIMITER/j/CODE_DELIMITER/+/CODE_DELIMITER/1/CODE_DELIMITER/]/CODE_DELIMITER/+/CODE_DELIMITER/matrix/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/[/CODE_DELIMITER/j/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/}/CODE_DELIMITER/free/CODE_DELIMITER/(/CODE_DELIMITER/dp/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/dp/CODE_DELIMITER/=/CODE_DELIMITER/nextDp/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/int/CODE_DELIMITER/result/CODE_DELIMITER/=/CODE_DELIMITER/dp/CODE_DELIMITER/[/CODE_DELIMITER/0/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/j/CODE_DELIMITER/=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/j/CODE_DELIMITER/</CODE_DELIMITER/matrixSize/CODE_DELIMITER/;/CODE_DELIMITER/j/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/result/CODE_DELIMITER/=/CODE_DELIMITER/min/CODE_DELIMITER/(/CODE_DELIMITER/result/CODE_DELIMITER/,/CODE_DELIMITER/dp/CODE_DELIMITER/[/CODE_DELIMITER/j/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/free/CODE_DELIMITER/(/CODE_DELIMITER/dp/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/result/CODE_DELIMITER/;/CODE_DELIMITER/}
int/CODE_DELIMITER/rangeSumBST/CODE_DELIMITER/(/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/root/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/L/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/R/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/==/CODE_DELIMITER/NULL/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/else/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/val/CODE_DELIMITER/>=/CODE_DELIMITER/L/CODE_DELIMITER/&&/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/val/CODE_DELIMITER/<=/CODE_DELIMITER/R/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/val/CODE_DELIMITER/+/CODE_DELIMITER/rangeSumBST/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/left/CODE_DELIMITER/,/CODE_DELIMITER/L/CODE_DELIMITER/,/CODE_DELIMITER/R/CODE_DELIMITER/)/CODE_DELIMITER/+/CODE_DELIMITER/rangeSumBST/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/right/CODE_DELIMITER/,/CODE_DELIMITER/L/CODE_DELIMITER/,/CODE_DELIMITER/R/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/else/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/rangeSumBST/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/left/CODE_DELIMITER/,/CODE_DELIMITER/L/CODE_DELIMITER/,/CODE_DELIMITER/R/CODE_DELIMITER/)/CODE_DELIMITER/+/CODE_DELIMITER/rangeSumBST/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/right/CODE_DELIMITER/,/CODE_DELIMITER/L/CODE_DELIMITER/,/CODE_DELIMITER/R/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/}
int/CODE_DELIMITER/firstUniqChar/CODE_DELIMITER/(/CODE_DELIMITER/char/CODE_DELIMITER/*/CODE_DELIMITER/s/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/arr/CODE_DELIMITER/=/CODE_DELIMITER/calloc/CODE_DELIMITER/(/CODE_DELIMITER/256/CODE_DELIMITER/,/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/strlen/CODE_DELIMITER/(/CODE_DELIMITER/s/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/arr/CODE_DELIMITER/[/CODE_DELIMITER/s/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/arr/CODE_DELIMITER/[/CODE_DELIMITER/s/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/]/CODE_DELIMITER/+/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/strlen/CODE_DELIMITER/(/CODE_DELIMITER/s/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/arr/CODE_DELIMITER/[/CODE_DELIMITER/s/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/]/CODE_DELIMITER/==/CODE_DELIMITER/1/CODE_DELIMITER/)/CODE_DELIMITER/return/CODE_DELIMITER/i/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/}
#/CODE_DELIMITER/define/CODE_DELIMITER/min/CODE_DELIMITER/(/CODE_DELIMITER/x/CODE_DELIMITER/,/CODE_DELIMITER/y/CODE_DELIMITER/)/CODE_DELIMITER/(/CODE_DELIMITER/(/CODE_DELIMITER/(/CODE_DELIMITER/x/CODE_DELIMITER/)/CODE_DELIMITER/</CODE_DELIMITER/(/CODE_DELIMITER/y/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/?/CODE_DELIMITER/(/CODE_DELIMITER/x/CODE_DELIMITER/)/CODE_DELIMITER/:/CODE_DELIMITER/(/CODE_DELIMITER/y/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/bool/CODE_DELIMITER/isWordLess/CODE_DELIMITER/(/CODE_DELIMITER/char/CODE_DELIMITER/*/CODE_DELIMITER/word1/CODE_DELIMITER/,/CODE_DELIMITER/char/CODE_DELIMITER/*/CODE_DELIMITER/word2/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/charOrder/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/word1Length/CODE_DELIMITER/=/CODE_DELIMITER/strlen/CODE_DELIMITER/(/CODE_DELIMITER/word1/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/word2Length/CODE_DELIMITER/=/CODE_DELIMITER/strlen/CODE_DELIMITER/(/CODE_DELIMITER/word2/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/min/CODE_DELIMITER/(/CODE_DELIMITER/word1Length/CODE_DELIMITER/,/CODE_DELIMITER/word2Length/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/charWordsDiff/CODE_DELIMITER/=/CODE_DELIMITER/(/CODE_DELIMITER/charOrder/CODE_DELIMITER/[/CODE_DELIMITER/word1/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/-/CODE_DELIMITER/'a'/CODE_DELIMITER/]/CODE_DELIMITER/-/CODE_DELIMITER/charOrder/CODE_DELIMITER/[/CODE_DELIMITER/word2/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/-/CODE_DELIMITER/'a'/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/charWordsDiff/CODE_DELIMITER/</CODE_DELIMITER/0/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/true/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/charWordsDiff/CODE_DELIMITER/>/CODE_DELIMITER/0/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/false/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/word1Length/CODE_DELIMITER/<=/CODE_DELIMITER/word2Length/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/// Keep array-hashtable of order letters./CODE_DELIMITER/// Runtime: O(n)/CODE_DELIMITER/// Space: O(1)/CODE_DELIMITER/bool/CODE_DELIMITER/isAlienSorted/CODE_DELIMITER/(/CODE_DELIMITER/char/CODE_DELIMITER/*/CODE_DELIMITER/*/CODE_DELIMITER/words/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/wordsSize/CODE_DELIMITER/,/CODE_DELIMITER/char/CODE_DELIMITER/*/CODE_DELIMITER/order/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/const/CODE_DELIMITER/int/CODE_DELIMITER/lowerCaseLettersNumber/CODE_DELIMITER/=/CODE_DELIMITER/26/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/charorder/CODE_DELIMITER/[/CODE_DELIMITER/lowerCaseLettersNumber/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/lowerCaseLettersNumber/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/charorder/CODE_DELIMITER/[/CODE_DELIMITER/order/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/-/CODE_DELIMITER/'a'/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/i/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/wordsSize/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/!/CODE_DELIMITER/isWordLess/CODE_DELIMITER/(/CODE_DELIMITER/words/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/,/CODE_DELIMITER/words/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/+/CODE_DELIMITER/1/CODE_DELIMITER/]/CODE_DELIMITER/,/CODE_DELIMITER/charorder/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/false/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/true/CODE_DELIMITER/;/CODE_DELIMITER/}
bool/CODE_DELIMITER/isUnivalTree/CODE_DELIMITER/(/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/root/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/==/CODE_DELIMITER/NULL/CODE_DELIMITER/)/CODE_DELIMITER/return/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/left/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/left/CODE_DELIMITER/->/CODE_DELIMITER/val/CODE_DELIMITER/!=/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/val/CODE_DELIMITER/)/CODE_DELIMITER/return/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/right/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/right/CODE_DELIMITER/->/CODE_DELIMITER/val/CODE_DELIMITER/!=/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/val/CODE_DELIMITER/)/CODE_DELIMITER/return/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/isUnivalTree/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/left/CODE_DELIMITER/)/CODE_DELIMITER/&&/CODE_DELIMITER/isUnivalTree/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/right/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}
/* 1st way: Using 2 pointers *//CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/sortedSquares/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/A/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/ASize/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/returnSize/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/,/CODE_DELIMITER/start/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/,/CODE_DELIMITER/end/CODE_DELIMITER/=/CODE_DELIMITER/ASize/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/res/CODE_DELIMITER/=/CODE_DELIMITER/malloc/CODE_DELIMITER/(/CODE_DELIMITER/ASize/CODE_DELIMITER/*/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/*/CODE_DELIMITER/returnSize/CODE_DELIMITER/=/CODE_DELIMITER/ASize/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/ASize/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/>=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/--/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/abs/CODE_DELIMITER/(/CODE_DELIMITER/A/CODE_DELIMITER/[/CODE_DELIMITER/start/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/>/CODE_DELIMITER/A/CODE_DELIMITER/[/CODE_DELIMITER/end/CODE_DELIMITER/]/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/res/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/A/CODE_DELIMITER/[/CODE_DELIMITER/start/CODE_DELIMITER/]/CODE_DELIMITER/*/CODE_DELIMITER/A/CODE_DELIMITER/[/CODE_DELIMITER/start/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/start/CODE_DELIMITER/++/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/else/CODE_DELIMITER/{/CODE_DELIMITER/res/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/A/CODE_DELIMITER/[/CODE_DELIMITER/end/CODE_DELIMITER/]/CODE_DELIMITER/*/CODE_DELIMITER/A/CODE_DELIMITER/[/CODE_DELIMITER/end/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/end/CODE_DELIMITER/--/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/res/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER//* 2nd way: Using qsort *//CODE_DELIMITER/int/CODE_DELIMITER/cmpval/CODE_DELIMITER/(/CODE_DELIMITER/const/CODE_DELIMITER/void/CODE_DELIMITER/*/CODE_DELIMITER/a/CODE_DELIMITER/,/CODE_DELIMITER/const/CODE_DELIMITER/void/CODE_DELIMITER/*/CODE_DELIMITER/b/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/*/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/)/CODE_DELIMITER/a/CODE_DELIMITER/-/CODE_DELIMITER/*/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/)/CODE_DELIMITER/b/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/sortedSquares/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/A/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/ASize/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/returnSize/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/res/CODE_DELIMITER/=/CODE_DELIMITER/malloc/CODE_DELIMITER/(/CODE_DELIMITER/ASize/CODE_DELIMITER/*/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/ASize/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/res/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/A/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/*/CODE_DELIMITER/A/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/*/CODE_DELIMITER/returnSize/CODE_DELIMITER/=/CODE_DELIMITER/ASize/CODE_DELIMITER/;/CODE_DELIMITER/qsort/CODE_DELIMITER/(/CODE_DELIMITER/res/CODE_DELIMITER/,/CODE_DELIMITER/ASize/CODE_DELIMITER/,/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/)/CODE_DELIMITER/,/CODE_DELIMITER/cmpval/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/res/CODE_DELIMITER/;/CODE_DELIMITER/}
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 *//CODE_DELIMITER/struct/CODE_DELIMITER/NodeDistributeInfo/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/distributeMoves/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/distributeExcess/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/;/CODE_DELIMITER/struct/CODE_DELIMITER/NodeDistributeInfo/CODE_DELIMITER/*/CODE_DELIMITER/getDisturb/CODE_DELIMITER/(/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/node/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/struct/CODE_DELIMITER/NodeDistributeInfo/CODE_DELIMITER/*/CODE_DELIMITER/result/CODE_DELIMITER/=/CODE_DELIMITER/malloc/CODE_DELIMITER/(/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/struct/CODE_DELIMITER/NodeDistributeInfo/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/node/CODE_DELIMITER/==/CODE_DELIMITER/NULL/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/result/CODE_DELIMITER/->/CODE_DELIMITER/distributeMoves/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/result/CODE_DELIMITER/->/CODE_DELIMITER/distributeExcess/CODE_DELIMITER/=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/result/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/struct/CODE_DELIMITER/NodeDistributeInfo/CODE_DELIMITER/*/CODE_DELIMITER/leftDistribute/CODE_DELIMITER/=/CODE_DELIMITER/getDisturb/CODE_DELIMITER/(/CODE_DELIMITER/node/CODE_DELIMITER/->/CODE_DELIMITER/left/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/struct/CODE_DELIMITER/NodeDistributeInfo/CODE_DELIMITER/*/CODE_DELIMITER/rightDistribute/CODE_DELIMITER/=/CODE_DELIMITER/getDisturb/CODE_DELIMITER/(/CODE_DELIMITER/node/CODE_DELIMITER/->/CODE_DELIMITER/right/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/coinsToLeft/CODE_DELIMITER/=/CODE_DELIMITER/1/CODE_DELIMITER/-/CODE_DELIMITER/leftDistribute/CODE_DELIMITER/->/CODE_DELIMITER/distributeExcess/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/coinsToRight/CODE_DELIMITER/=/CODE_DELIMITER/1/CODE_DELIMITER/-/CODE_DELIMITER/rightDistribute/CODE_DELIMITER/->/CODE_DELIMITER/distributeExcess/CODE_DELIMITER/;/CODE_DELIMITER/// Calculate moves as excess and depth between left and right subtrees./CODE_DELIMITER/result/CODE_DELIMITER/->/CODE_DELIMITER/distributeMoves/CODE_DELIMITER/=/CODE_DELIMITER/leftDistribute/CODE_DELIMITER/->/CODE_DELIMITER/distributeMoves/CODE_DELIMITER/+/CODE_DELIMITER/rightDistribute/CODE_DELIMITER/->/CODE_DELIMITER/distributeMoves/CODE_DELIMITER/+/CODE_DELIMITER/abs/CODE_DELIMITER/(/CODE_DELIMITER/coinsToLeft/CODE_DELIMITER/)/CODE_DELIMITER/+/CODE_DELIMITER/abs/CODE_DELIMITER/(/CODE_DELIMITER/coinsToRight/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/result/CODE_DELIMITER/->/CODE_DELIMITER/distributeExcess/CODE_DELIMITER/=/CODE_DELIMITER/node/CODE_DELIMITER/->/CODE_DELIMITER/val/CODE_DELIMITER/-/CODE_DELIMITER/coinsToLeft/CODE_DELIMITER/-/CODE_DELIMITER/coinsToRight/CODE_DELIMITER/;/CODE_DELIMITER/free/CODE_DELIMITER/(/CODE_DELIMITER/leftDistribute/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/free/CODE_DELIMITER/(/CODE_DELIMITER/rightDistribute/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/result/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/// Depth-first search ./CODE_DELIMITER/// On each node-step we try to recombinate coins between left and right subtree. /CODE_DELIMITER/// We know that coins are the same number that nodes, and we can get coins by depth/CODE_DELIMITER/// Runtime: O(n)/CODE_DELIMITER/// Space: O(1)/CODE_DELIMITER/int/CODE_DELIMITER/distributeCoins/CODE_DELIMITER/(/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/root/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/getDisturb/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/)/CODE_DELIMITER/->/CODE_DELIMITER/distributeMoves/CODE_DELIMITER/;/CODE_DELIMITER/}
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 *//CODE_DELIMITER/#/CODE_DELIMITER/include/CODE_DELIMITER/</CODE_DELIMITER/limits/CODE_DELIMITER/./CODE_DELIMITER/h/CODE_DELIMITER/>/CODE_DELIMITER/typedef/CODE_DELIMITER/struct/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/values/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/CurrentIndex/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/NumberOfNodes/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/BSTIterator/CODE_DELIMITER/;/CODE_DELIMITER/void/CODE_DELIMITER/TraverseAndAssign/CODE_DELIMITER/(/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/root/CODE_DELIMITER/,/CODE_DELIMITER/BSTIterator/CODE_DELIMITER/*/CODE_DELIMITER/obj/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/!/CODE_DELIMITER/root/CODE_DELIMITER/)/CODE_DELIMITER/return/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/left/CODE_DELIMITER/)/CODE_DELIMITER/TraverseAndAssign/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/left/CODE_DELIMITER/,/CODE_DELIMITER/obj/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/obj/CODE_DELIMITER/->/CODE_DELIMITER/values/CODE_DELIMITER/[/CODE_DELIMITER/obj/CODE_DELIMITER/->/CODE_DELIMITER/CurrentIndex/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/val/CODE_DELIMITER/;/CODE_DELIMITER/obj/CODE_DELIMITER/->/CODE_DELIMITER/CurrentIndex/CODE_DELIMITER/++/CODE_DELIMITER/;/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/right/CODE_DELIMITER/)/CODE_DELIMITER/TraverseAndAssign/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/right/CODE_DELIMITER/,/CODE_DELIMITER/obj/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/int/CODE_DELIMITER/TotalNodes/CODE_DELIMITER/(/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/root/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/!/CODE_DELIMITER/root/CODE_DELIMITER/)/CODE_DELIMITER/return/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/nodes_left/CODE_DELIMITER/=/CODE_DELIMITER/TotalNodes/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/left/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/nodes_right/CODE_DELIMITER/=/CODE_DELIMITER/TotalNodes/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/->/CODE_DELIMITER/right/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/nodes_left/CODE_DELIMITER/+/CODE_DELIMITER/nodes_right/CODE_DELIMITER/+/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/BSTIterator/CODE_DELIMITER/*/CODE_DELIMITER/bSTIteratorCreate/CODE_DELIMITER/(/CODE_DELIMITER/struct/CODE_DELIMITER/TreeNode/CODE_DELIMITER/*/CODE_DELIMITER/root/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/n/CODE_DELIMITER/=/CODE_DELIMITER/TotalNodes/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/size/CODE_DELIMITER/=/CODE_DELIMITER/n/CODE_DELIMITER/+/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/printf/CODE_DELIMITER/(/CODE_DELIMITER/"%d"/CODE_DELIMITER/,/CODE_DELIMITER/size/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/BSTIterator/CODE_DELIMITER/*/CODE_DELIMITER/obj/CODE_DELIMITER/=/CODE_DELIMITER/(/CODE_DELIMITER/BSTIterator/CODE_DELIMITER/*/CODE_DELIMITER/)/CODE_DELIMITER/malloc/CODE_DELIMITER/(/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/BSTIterator/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/obj/CODE_DELIMITER/->/CODE_DELIMITER/values/CODE_DELIMITER/=/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/)/CODE_DELIMITER/calloc/CODE_DELIMITER/(/CODE_DELIMITER/size/CODE_DELIMITER/,/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/obj/CODE_DELIMITER/->/CODE_DELIMITER/CurrentIndex/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/obj/CODE_DELIMITER/->/CODE_DELIMITER/NumberOfNodes/CODE_DELIMITER/=/CODE_DELIMITER/n/CODE_DELIMITER/;/CODE_DELIMITER/obj/CODE_DELIMITER/->/CODE_DELIMITER/values/CODE_DELIMITER/[/CODE_DELIMITER/size/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/INT_MAX/CODE_DELIMITER/;/CODE_DELIMITER/TraverseAndAssign/CODE_DELIMITER/(/CODE_DELIMITER/root/CODE_DELIMITER/,/CODE_DELIMITER/obj/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/obj/CODE_DELIMITER/->/CODE_DELIMITER/CurrentIndex/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/obj/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER//** @return the next smallest number *//CODE_DELIMITER/int/CODE_DELIMITER/bSTIteratorNext/CODE_DELIMITER/(/CODE_DELIMITER/BSTIterator/CODE_DELIMITER/*/CODE_DELIMITER/obj/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/NextValue/CODE_DELIMITER/=/CODE_DELIMITER/obj/CODE_DELIMITER/->/CODE_DELIMITER/values/CODE_DELIMITER/[/CODE_DELIMITER/obj/CODE_DELIMITER/->/CODE_DELIMITER/CurrentIndex/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/obj/CODE_DELIMITER/->/CODE_DELIMITER/CurrentIndex/CODE_DELIMITER/++/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/NextValue/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER//** @return whether we have a next smallest number *//CODE_DELIMITER/bool/CODE_DELIMITER/bSTIteratorHasNext/CODE_DELIMITER/(/CODE_DELIMITER/BSTIterator/CODE_DELIMITER/*/CODE_DELIMITER/obj/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/!/CODE_DELIMITER/obj/CODE_DELIMITER/->/CODE_DELIMITER/NumberOfNodes/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/false/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/printf/CODE_DELIMITER/(/CODE_DELIMITER/" Here "/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/(/CODE_DELIMITER/obj/CODE_DELIMITER/->/CODE_DELIMITER/values/CODE_DELIMITER/[/CODE_DELIMITER/obj/CODE_DELIMITER/->/CODE_DELIMITER/CurrentIndex/CODE_DELIMITER/]/CODE_DELIMITER/==/CODE_DELIMITER/INT_MAX/CODE_DELIMITER/)/CODE_DELIMITER/?/CODE_DELIMITER/false/CODE_DELIMITER/:/CODE_DELIMITER/true/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/void/CODE_DELIMITER/bSTIteratorFree/CODE_DELIMITER/(/CODE_DELIMITER/BSTIterator/CODE_DELIMITER/*/CODE_DELIMITER/obj/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/free/CODE_DELIMITER/(/CODE_DELIMITER/obj/CODE_DELIMITER/->/CODE_DELIMITER/values/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/free/CODE_DELIMITER/(/CODE_DELIMITER/obj/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/}
/**
 * Note: The returned array must be malloced, assume caller calls free().
 *//CODE_DELIMITER/// collecting sum Runtime: O(len(queries)), Space: O(1)/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/sumEvenAfterQueries/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/nums/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/numsSize/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/*/CODE_DELIMITER/queries/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/queriesSize/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/queriesColSize/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/returnSize/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/summ/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/result/CODE_DELIMITER/=/CODE_DELIMITER/malloc/CODE_DELIMITER/(/CODE_DELIMITER/queriesSize/CODE_DELIMITER/*/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/*/CODE_DELIMITER/returnSize/CODE_DELIMITER/=/CODE_DELIMITER/queriesSize/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/numsSize/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/%/CODE_DELIMITER/2/CODE_DELIMITER/==/CODE_DELIMITER/0/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/summ/CODE_DELIMITER/+=/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/}/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/queriesSize/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/query/CODE_DELIMITER/=/CODE_DELIMITER/queries/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/val/CODE_DELIMITER/=/CODE_DELIMITER/query/CODE_DELIMITER/[/CODE_DELIMITER/0/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/index/CODE_DELIMITER/=/CODE_DELIMITER/query/CODE_DELIMITER/[/CODE_DELIMITER/1/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/// sub index value from summ if it's even/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/index/CODE_DELIMITER/]/CODE_DELIMITER/%/CODE_DELIMITER/2/CODE_DELIMITER/==/CODE_DELIMITER/0/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/summ/CODE_DELIMITER/-=/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/index/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/// modify the nums[index] value/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/index/CODE_DELIMITER/]/CODE_DELIMITER/+=/CODE_DELIMITER/val/CODE_DELIMITER/;/CODE_DELIMITER/// add index value from summ if it's even/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/index/CODE_DELIMITER/]/CODE_DELIMITER/%/CODE_DELIMITER/2/CODE_DELIMITER/==/CODE_DELIMITER/0/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/summ/CODE_DELIMITER/+=/CODE_DELIMITER/nums/CODE_DELIMITER/[/CODE_DELIMITER/index/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/result/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/=/CODE_DELIMITER/summ/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/return/CODE_DELIMITER/result/CODE_DELIMITER/;/CODE_DELIMITER/}
// Using hashtable./CODE_DELIMITER/// Runtime: O(n + len(trust))/CODE_DELIMITER/// Space: O(n)/CODE_DELIMITER/int/CODE_DELIMITER/findJudge/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/n/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/*/CODE_DELIMITER/trust/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/trustSize/CODE_DELIMITER/,/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/trustColSize/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/personsToTrust/CODE_DELIMITER/=/CODE_DELIMITER/calloc/CODE_DELIMITER/(/CODE_DELIMITER/n/CODE_DELIMITER/+/CODE_DELIMITER/1/CODE_DELIMITER/,/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/personsFromTrust/CODE_DELIMITER/=/CODE_DELIMITER/calloc/CODE_DELIMITER/(/CODE_DELIMITER/n/CODE_DELIMITER/+/CODE_DELIMITER/1/CODE_DELIMITER/,/CODE_DELIMITER/sizeof/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/)/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/0/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/trustSize/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/int/CODE_DELIMITER/*/CODE_DELIMITER/currentTrust/CODE_DELIMITER/=/CODE_DELIMITER/trust/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/;/CODE_DELIMITER/personsToTrust/CODE_DELIMITER/[/CODE_DELIMITER/currentTrust/CODE_DELIMITER/[/CODE_DELIMITER/1/CODE_DELIMITER/]/CODE_DELIMITER/]/CODE_DELIMITER/+=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/personsFromTrust/CODE_DELIMITER/[/CODE_DELIMITER/currentTrust/CODE_DELIMITER/[/CODE_DELIMITER/0/CODE_DELIMITER/]/CODE_DELIMITER/]/CODE_DELIMITER/+=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/int/CODE_DELIMITER/potentialJudjeNumber/CODE_DELIMITER/=/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/for/CODE_DELIMITER/(/CODE_DELIMITER/int/CODE_DELIMITER/i/CODE_DELIMITER/=/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/</CODE_DELIMITER/n/CODE_DELIMITER/+/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/i/CODE_DELIMITER/++/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/personsToTrust/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/==/CODE_DELIMITER/n/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/&&/CODE_DELIMITER/personsFromTrust/CODE_DELIMITER/[/CODE_DELIMITER/i/CODE_DELIMITER/]/CODE_DELIMITER/==/CODE_DELIMITER/0/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/if/CODE_DELIMITER/(/CODE_DELIMITER/potentialJudjeNumber/CODE_DELIMITER/>/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/)/CODE_DELIMITER/{/CODE_DELIMITER/return/CODE_DELIMITER/-/CODE_DELIMITER/1/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/potentialJudjeNumber/CODE_DELIMITER/=/CODE_DELIMITER/i/CODE_DELIMITER/;/CODE_DELIMITER/}/CODE_DELIMITER/}/CODE_DELIMITER/free/CODE_DELIMITER/(/CODE_DELIMITER/personsToTrust/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/free/CODE_DELIMITER/(/CODE_DELIMITER/personsFromTrust/CODE_DELIMITER/)/CODE_DELIMITER/;/CODE_DELIMITER/return/CODE_DELIMITER/potentialJudjeNumber/CODE_DELIMITER/;/CODE_DELIMITER/}
